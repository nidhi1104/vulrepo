{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;\nconst ReadStreamTokenizer_1 = require(\"./ReadStreamTokenizer\");\nconst BufferTokenizer_1 = require(\"./BufferTokenizer\");\nvar peek_readable_1 = require(\"peek-readable\");\nObject.defineProperty(exports, \"EndOfStreamError\", {\n  enumerable: true,\n  get: function () {\n    return peek_readable_1.EndOfStreamError;\n  }\n});\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param stream - Read from Node.js Stream.Readable\r\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\r\n * @returns ReadStreamTokenizer\r\n */\nfunction fromStream(stream, fileInfo) {\n  fileInfo = fileInfo ? fileInfo : {};\n  return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);\n}\nexports.fromStream = fromStream;\n/**\r\n * Construct ReadStreamTokenizer from given Buffer.\r\n * @param uint8Array - Uint8Array to tokenize\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns BufferTokenizer\r\n */\nfunction fromBuffer(uint8Array, fileInfo) {\n  return new BufferTokenizer_1.BufferTokenizer(uint8Array, fileInfo);\n}\nexports.fromBuffer = fromBuffer;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromBuffer","fromStream","EndOfStreamError","ReadStreamTokenizer_1","require","BufferTokenizer_1","peek_readable_1","enumerable","get","stream","fileInfo","ReadStreamTokenizer","uint8Array","BufferTokenizer"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/strtok3/lib/core.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;\r\nconst ReadStreamTokenizer_1 = require(\"./ReadStreamTokenizer\");\r\nconst BufferTokenizer_1 = require(\"./BufferTokenizer\");\r\nvar peek_readable_1 = require(\"peek-readable\");\r\nObject.defineProperty(exports, \"EndOfStreamError\", { enumerable: true, get: function () { return peek_readable_1.EndOfStreamError; } });\r\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param stream - Read from Node.js Stream.Readable\r\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\r\n * @returns ReadStreamTokenizer\r\n */\r\nfunction fromStream(stream, fileInfo) {\r\n    fileInfo = fileInfo ? fileInfo : {};\r\n    return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);\r\n}\r\nexports.fromStream = fromStream;\r\n/**\r\n * Construct ReadStreamTokenizer from given Buffer.\r\n * @param uint8Array - Uint8Array to tokenize\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns BufferTokenizer\r\n */\r\nfunction fromBuffer(uint8Array, fileInfo) {\r\n    return new BufferTokenizer_1.BufferTokenizer(uint8Array, fileInfo);\r\n}\r\nexports.fromBuffer = fromBuffer;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAGF,OAAO,CAACG,UAAU,GAAGH,OAAO,CAACI,gBAAgB,GAAG,KAAK,CAAC;AAC3E,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC9D,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACtD,IAAIE,eAAe,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC9CR,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,kBAAkB,EAAE;EAAES,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,SAAAA,CAAA,EAAY;IAAE,OAAOF,eAAe,CAACJ,gBAAgB;EAAE;AAAE,CAAC,CAAC;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,UAAUA,CAACQ,MAAM,EAAEC,QAAQ,EAAE;EAClCA,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,GAAG,CAAC,CAAC;EACnC,OAAO,IAAIP,qBAAqB,CAACQ,mBAAmB,CAACF,MAAM,EAAEC,QAAQ,CAAC;AAC1E;AACAZ,OAAO,CAACG,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,UAAUA,CAACY,UAAU,EAAEF,QAAQ,EAAE;EACtC,OAAO,IAAIL,iBAAiB,CAACQ,eAAe,CAACD,UAAU,EAAEF,QAAQ,CAAC;AACtE;AACAZ,OAAO,CAACE,UAAU,GAAGA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}