{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable no-restricted-syntax */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readExternalSources = void 0;\n/**\n * (C) Copyright IBM Corp. 2019, 2022.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar camelcase_1 = __importDefault(require(\"camelcase\"));\nvar lodash_isempty_1 = __importDefault(require(\"lodash.isempty\"));\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\nvar file_reading_helpers_1 = require(\"./file-reading-helpers\");\n/**\n * Read properties stored in external sources like Environment Variables,\n * the credentials file, VCAP services, etc. and return them as an\n * object. The keys of this object will have the service name prefix removed\n * and will be converted to lower camel case.\n *\n * Only one source will be used at a time.\n *\n * @param serviceName - the service name prefix\n */\nfunction readExternalSources(serviceName) {\n  if (!serviceName) {\n    throw new Error('Service name is required.');\n  }\n  return getProperties(serviceName);\n}\nexports.readExternalSources = readExternalSources;\nfunction getProperties(serviceName) {\n  // Try to get properties from external sources, with the following priority:\n  // 1. Credentials file (ibm-credentials.env)\n  // 2. Environment variables\n  // 3. VCAP Services (Cloud Foundry)\n  // only get properties from one source, return null if none found\n  var properties = null;\n  properties = filterPropertiesByServiceName((0, file_reading_helpers_1.readCredentialsFile)(), serviceName);\n  if ((0, lodash_isempty_1.default)(properties)) {\n    properties = filterPropertiesByServiceName(process.env, serviceName);\n  }\n  if ((0, lodash_isempty_1.default)(properties)) {\n    properties = getPropertiesFromVCAP(serviceName);\n  }\n  return properties;\n}\n/**\n * Pulls credentials from env properties\n *\n * Property checked is uppercase service.name suffixed by _USERNAME and _PASSWORD\n *\n * For example, if service.name is speech_to_text,\n * env properties are SPEECH_TO_TEXT_USERNAME and SPEECH_TO_TEXT_PASSWORD\n *\n * @param envObj - the object containing the credentials keyed by environment variables\n * @returns the set of credentials\n */\nfunction filterPropertiesByServiceName(envObj, serviceName) {\n  var credentials = {};\n  var name = \"\".concat(serviceName.toUpperCase().replace(/-/g, '_'), \"_\"); // append the underscore that must follow the service name\n  // filter out properties that don't begin with the service name\n  Object.keys(envObj).forEach(function (key) {\n    if (key.startsWith(name)) {\n      var propName = (0, camelcase_1.default)(key.substring(name.length)); // remove the name from the front of the string and make camelcase\n      credentials[propName] = envObj[key];\n    }\n  });\n  // all env variables are parsed as strings, convert boolean vars as needed\n  if (typeof credentials.disableSsl === 'string') {\n    credentials.disableSsl = credentials.disableSsl === 'true';\n  }\n  if (typeof credentials.authDisableSsl === 'string') {\n    credentials.authDisableSsl = credentials.authDisableSsl === 'true';\n  }\n  if (typeof credentials.enableGzip === 'string') {\n    credentials.enableGzip = credentials.enableGzip === 'true';\n  }\n  if (typeof credentials.enableRetries === 'string') {\n    credentials.enableRetries = credentials.enableRetries === 'true';\n  }\n  if (typeof credentials.maxRetries === 'string') {\n    credentials.maxRetries = parseInt(credentials.maxRetries, 10);\n  }\n  if (typeof credentials.retryInterval === 'string') {\n    credentials.retryInterval = parseInt(credentials.retryInterval, 10);\n  }\n  return credentials;\n}\n/**\n * Pulls credentials from VCAP_SERVICES env property that IBM Cloud sets\n *\n * The function will first look for a service entry whose \"name\" field matches\n * the serviceKey value. If found, return its credentials.\n *\n * If no match against the service entry's \"name\" field is found, then find the\n * service list with a key matching the serviceKey value. If found, return the\n * credentials of the first service in the service list.\n */\nfunction getVCAPCredentialsForService(name) {\n  if (process.env.VCAP_SERVICES) {\n    var services = JSON.parse(process.env.VCAP_SERVICES);\n    for (var _i = 0, _a = Object.keys(services); _i < _a.length; _i++) {\n      var serviceName = _a[_i];\n      for (var _b = 0, _c = services[serviceName]; _b < _c.length; _b++) {\n        var instance = _c[_b];\n        if (instance.name === name) {\n          if (Object.prototype.hasOwnProperty.call(instance, 'credentials')) {\n            return instance.credentials;\n          }\n          logger_1.default.debug('no data read from VCAP_SERVICES');\n          return {};\n        }\n      }\n    }\n    for (var _d = 0, _e = Object.keys(services); _d < _e.length; _d++) {\n      var serviceName = _e[_d];\n      if (serviceName === name) {\n        if (services[serviceName].length > 0) {\n          if (Object.prototype.hasOwnProperty.call(services[serviceName][0], 'credentials')) {\n            return services[serviceName][0].credentials;\n          }\n          logger_1.default.debug('no data read from VCAP_SERVICES');\n          return {};\n        }\n        logger_1.default.debug('no data read from VCAP_SERVICES');\n        return {};\n      }\n    }\n  }\n  logger_1.default.debug('no data read from VCAP_SERVICES');\n  return {};\n}\nfunction getPropertiesFromVCAP(serviceName) {\n  var credentials = getVCAPCredentialsForService(serviceName);\n  // infer authentication type from credentials in a simple manner\n  // iam is used as the default later\n  if (credentials.username || credentials.password) {\n    credentials.authType = 'basic';\n  }\n  return credentials;\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","readExternalSources","camelcase_1","require","lodash_isempty_1","logger_1","file_reading_helpers_1","serviceName","Error","getProperties","properties","filterPropertiesByServiceName","readCredentialsFile","default","process","env","getPropertiesFromVCAP","envObj","credentials","name","concat","toUpperCase","replace","keys","forEach","key","startsWith","propName","substring","length","disableSsl","authDisableSsl","enableGzip","enableRetries","maxRetries","parseInt","retryInterval","getVCAPCredentialsForService","VCAP_SERVICES","services","JSON","parse","_i","_a","_b","_c","instance","prototype","hasOwnProperty","call","debug","_d","_e","username","password","authType"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/utils/read-external-sources.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable no-restricted-syntax */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readExternalSources = void 0;\n/**\n * (C) Copyright IBM Corp. 2019, 2022.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar camelcase_1 = __importDefault(require(\"camelcase\"));\nvar lodash_isempty_1 = __importDefault(require(\"lodash.isempty\"));\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\nvar file_reading_helpers_1 = require(\"./file-reading-helpers\");\n/**\n * Read properties stored in external sources like Environment Variables,\n * the credentials file, VCAP services, etc. and return them as an\n * object. The keys of this object will have the service name prefix removed\n * and will be converted to lower camel case.\n *\n * Only one source will be used at a time.\n *\n * @param serviceName - the service name prefix\n */\nfunction readExternalSources(serviceName) {\n    if (!serviceName) {\n        throw new Error('Service name is required.');\n    }\n    return getProperties(serviceName);\n}\nexports.readExternalSources = readExternalSources;\nfunction getProperties(serviceName) {\n    // Try to get properties from external sources, with the following priority:\n    // 1. Credentials file (ibm-credentials.env)\n    // 2. Environment variables\n    // 3. VCAP Services (Cloud Foundry)\n    // only get properties from one source, return null if none found\n    var properties = null;\n    properties = filterPropertiesByServiceName((0, file_reading_helpers_1.readCredentialsFile)(), serviceName);\n    if ((0, lodash_isempty_1.default)(properties)) {\n        properties = filterPropertiesByServiceName(process.env, serviceName);\n    }\n    if ((0, lodash_isempty_1.default)(properties)) {\n        properties = getPropertiesFromVCAP(serviceName);\n    }\n    return properties;\n}\n/**\n * Pulls credentials from env properties\n *\n * Property checked is uppercase service.name suffixed by _USERNAME and _PASSWORD\n *\n * For example, if service.name is speech_to_text,\n * env properties are SPEECH_TO_TEXT_USERNAME and SPEECH_TO_TEXT_PASSWORD\n *\n * @param envObj - the object containing the credentials keyed by environment variables\n * @returns the set of credentials\n */\nfunction filterPropertiesByServiceName(envObj, serviceName) {\n    var credentials = {};\n    var name = \"\".concat(serviceName.toUpperCase().replace(/-/g, '_'), \"_\"); // append the underscore that must follow the service name\n    // filter out properties that don't begin with the service name\n    Object.keys(envObj).forEach(function (key) {\n        if (key.startsWith(name)) {\n            var propName = (0, camelcase_1.default)(key.substring(name.length)); // remove the name from the front of the string and make camelcase\n            credentials[propName] = envObj[key];\n        }\n    });\n    // all env variables are parsed as strings, convert boolean vars as needed\n    if (typeof credentials.disableSsl === 'string') {\n        credentials.disableSsl = credentials.disableSsl === 'true';\n    }\n    if (typeof credentials.authDisableSsl === 'string') {\n        credentials.authDisableSsl = credentials.authDisableSsl === 'true';\n    }\n    if (typeof credentials.enableGzip === 'string') {\n        credentials.enableGzip = credentials.enableGzip === 'true';\n    }\n    if (typeof credentials.enableRetries === 'string') {\n        credentials.enableRetries = credentials.enableRetries === 'true';\n    }\n    if (typeof credentials.maxRetries === 'string') {\n        credentials.maxRetries = parseInt(credentials.maxRetries, 10);\n    }\n    if (typeof credentials.retryInterval === 'string') {\n        credentials.retryInterval = parseInt(credentials.retryInterval, 10);\n    }\n    return credentials;\n}\n/**\n * Pulls credentials from VCAP_SERVICES env property that IBM Cloud sets\n *\n * The function will first look for a service entry whose \"name\" field matches\n * the serviceKey value. If found, return its credentials.\n *\n * If no match against the service entry's \"name\" field is found, then find the\n * service list with a key matching the serviceKey value. If found, return the\n * credentials of the first service in the service list.\n */\nfunction getVCAPCredentialsForService(name) {\n    if (process.env.VCAP_SERVICES) {\n        var services = JSON.parse(process.env.VCAP_SERVICES);\n        for (var _i = 0, _a = Object.keys(services); _i < _a.length; _i++) {\n            var serviceName = _a[_i];\n            for (var _b = 0, _c = services[serviceName]; _b < _c.length; _b++) {\n                var instance = _c[_b];\n                if (instance.name === name) {\n                    if (Object.prototype.hasOwnProperty.call(instance, 'credentials')) {\n                        return instance.credentials;\n                    }\n                    logger_1.default.debug('no data read from VCAP_SERVICES');\n                    return {};\n                }\n            }\n        }\n        for (var _d = 0, _e = Object.keys(services); _d < _e.length; _d++) {\n            var serviceName = _e[_d];\n            if (serviceName === name) {\n                if (services[serviceName].length > 0) {\n                    if (Object.prototype.hasOwnProperty.call(services[serviceName][0], 'credentials')) {\n                        return services[serviceName][0].credentials;\n                    }\n                    logger_1.default.debug('no data read from VCAP_SERVICES');\n                    return {};\n                }\n                logger_1.default.debug('no data read from VCAP_SERVICES');\n                return {};\n            }\n        }\n    }\n    logger_1.default.debug('no data read from VCAP_SERVICES');\n    return {};\n}\nfunction getPropertiesFromVCAP(serviceName) {\n    var credentials = getVCAPCredentialsForService(serviceName);\n    // infer authentication type from credentials in a simple manner\n    // iam is used as the default later\n    if (credentials.username || credentials.password) {\n        credentials.authType = 'basic';\n    }\n    return credentials;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}