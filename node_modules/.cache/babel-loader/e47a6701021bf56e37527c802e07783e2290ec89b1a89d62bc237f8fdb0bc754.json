{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BufferTokenizer = void 0;\nconst peek_readable_1 = require(\"peek-readable\");\nconst AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\nclass BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n  /**\r\n   * Construct BufferTokenizer\r\n   * @param uint8Array - Uint8Array to tokenize\r\n   * @param fileInfo - Pass additional file information to the tokenizer\r\n   */\n  constructor(uint8Array, fileInfo) {\n    super(fileInfo);\n    this.uint8Array = uint8Array;\n    this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;\n  }\n  /**\r\n   * Read buffer from tokenizer\r\n   * @param uint8Array - Uint8Array to tokenize\r\n   * @param options - Read behaviour options\r\n   * @returns {Promise<number>}\r\n   */\n  async readBuffer(uint8Array, options) {\n    if (options && options.position) {\n      if (options.position < this.position) {\n        throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n      }\n      this.position = options.position;\n    }\n    const bytesRead = await this.peekBuffer(uint8Array, options);\n    this.position += bytesRead;\n    return bytesRead;\n  }\n  /**\r\n   * Peek (read ahead) buffer from tokenizer\r\n   * @param uint8Array\r\n   * @param options - Read behaviour options\r\n   * @returns {Promise<number>}\r\n   */\n  async peekBuffer(uint8Array, options) {\n    const normOptions = this.normalizeOptions(uint8Array, options);\n    const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\n    if (!normOptions.mayBeLess && bytes2read < normOptions.length) {\n      throw new peek_readable_1.EndOfStreamError();\n    } else {\n      uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\n      return bytes2read;\n    }\n  }\n  async close() {\n    // empty\n  }\n}\nexports.BufferTokenizer = BufferTokenizer;","map":{"version":3,"names":["Object","defineProperty","exports","value","BufferTokenizer","peek_readable_1","require","AbstractTokenizer_1","AbstractTokenizer","constructor","uint8Array","fileInfo","size","length","readBuffer","options","position","Error","bytesRead","peekBuffer","normOptions","normalizeOptions","bytes2read","Math","min","mayBeLess","EndOfStreamError","set","subarray","offset","close"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/strtok3/lib/BufferTokenizer.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BufferTokenizer = void 0;\r\nconst peek_readable_1 = require(\"peek-readable\");\r\nconst AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\r\nclass BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\r\n    /**\r\n     * Construct BufferTokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param fileInfo - Pass additional file information to the tokenizer\r\n     */\r\n    constructor(uint8Array, fileInfo) {\r\n        super(fileInfo);\r\n        this.uint8Array = uint8Array;\r\n        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;\r\n    }\r\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        if (options && options.position) {\r\n            if (options.position < this.position) {\r\n                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n            }\r\n            this.position = options.position;\r\n        }\r\n        const bytesRead = await this.peekBuffer(uint8Array, options);\r\n        this.position += bytesRead;\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\r\n        if ((!normOptions.mayBeLess) && bytes2read < normOptions.length) {\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        }\r\n        else {\r\n            uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\r\n            return bytes2read;\r\n        }\r\n    }\r\n    async close() {\r\n        // empty\r\n    }\r\n}\r\nexports.BufferTokenizer = BufferTokenizer;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,MAAMC,eAAe,GAAGC,OAAO,CAAC,eAAe,CAAC;AAChD,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC1D,MAAMF,eAAe,SAASG,mBAAmB,CAACC,iBAAiB,CAAC;EAChE;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAACC,UAAU,EAAEC,QAAQ,EAAE;IAC9B,KAAK,CAACA,QAAQ,CAAC;IACf,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,CAACC,IAAI,GAAG,IAAI,CAACD,QAAQ,CAACC,IAAI,GAAG,IAAI,CAACD,QAAQ,CAACC,IAAI,GAAGF,UAAU,CAACG,MAAM;EACpF;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,UAAUA,CAACJ,UAAU,EAAEK,OAAO,EAAE;IAClC,IAAIA,OAAO,IAAIA,OAAO,CAACC,QAAQ,EAAE;MAC7B,IAAID,OAAO,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;QAClC,MAAM,IAAIC,KAAK,CAAC,uEAAuE,CAAC;MAC5F;MACA,IAAI,CAACD,QAAQ,GAAGD,OAAO,CAACC,QAAQ;IACpC;IACA,MAAME,SAAS,GAAG,MAAM,IAAI,CAACC,UAAU,CAACT,UAAU,EAAEK,OAAO,CAAC;IAC5D,IAAI,CAACC,QAAQ,IAAIE,SAAS;IAC1B,OAAOA,SAAS;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,UAAUA,CAACT,UAAU,EAAEK,OAAO,EAAE;IAClC,MAAMK,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACX,UAAU,EAAEK,OAAO,CAAC;IAC9D,MAAMO,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACd,UAAU,CAACG,MAAM,GAAGO,WAAW,CAACJ,QAAQ,EAAEI,WAAW,CAACP,MAAM,CAAC;IAC9F,IAAK,CAACO,WAAW,CAACK,SAAS,IAAKH,UAAU,GAAGF,WAAW,CAACP,MAAM,EAAE;MAC7D,MAAM,IAAIR,eAAe,CAACqB,gBAAgB,CAAC,CAAC;IAChD,CAAC,MACI;MACDhB,UAAU,CAACiB,GAAG,CAAC,IAAI,CAACjB,UAAU,CAACkB,QAAQ,CAACR,WAAW,CAACJ,QAAQ,EAAEI,WAAW,CAACJ,QAAQ,GAAGM,UAAU,CAAC,EAAEF,WAAW,CAACS,MAAM,CAAC;MACrH,OAAOP,UAAU;IACrB;EACJ;EACA,MAAMQ,KAAKA,CAAA,EAAG;IACV;EAAA;AAER;AACA5B,OAAO,CAACE,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}