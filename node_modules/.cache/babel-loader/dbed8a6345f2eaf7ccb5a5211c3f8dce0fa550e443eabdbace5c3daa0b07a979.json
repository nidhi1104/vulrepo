{"ast":null,"code":"\"use strict\";\n\n/**\n * (C) Copyright IBM Corp. 2021, 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VpcInstanceAuthenticator = void 0;\nvar authenticator_1 = require(\"./authenticator\");\nvar vpc_instance_token_manager_1 = require(\"../token-managers/vpc-instance-token-manager\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The VpcInstanceAuthenticator implements an authentication scheme in which it retrieves an \"instance identity token\"\n * and exchanges that for an IAM access token using the VPC Instance Metadata Service API which is available on the local\n * compute resource (VM). The instance identity token is similar to an IAM apikey, except that it is managed automatically\n * by the compute resource provider (VPC).\n *\n * The resulting IAM access token is then added to outbound requests in an Authorization header\n *\n *      Authorization: Bearer \\<access-token\\>\n */\nvar VpcInstanceAuthenticator = /** @class */function (_super) {\n  __extends(VpcInstanceAuthenticator, _super);\n  /**\n   * Create a new VpcInstanceAuthenticator instance.\n   *\n   * @param options - Configuration options for VpcInstance authentication.\n   * This should be an object containing these fields:\n   * - url: (optional) the endpoint URL for the VPC Instance Metadata Service (default value: \"http://169.254.169.254\")\n   * - iamProfileCrn: (optional) the CRN of the linked IAM trusted profile to be used to obtain the IAM access token\n   * - iamProfileId: (optional) the ID of the linked IAM trusted profile to be used to obtain the IAM access token\n   *\n   * @remarks\n   * At most one of \"iamProfileCrn\" or \"iamProfileId\" may be specified. If neither one is specified,\n   * then the default IAM profile defined for the compute resource will be used.\n   */\n  function VpcInstanceAuthenticator(options) {\n    var _this = this;\n    // all parameters are optional\n    options = options || {};\n    _this = _super.call(this, options) || this;\n    if (options.iamProfileCrn) {\n      _this.iamProfileCrn = options.iamProfileCrn;\n    }\n    if (options.iamProfileId) {\n      _this.iamProfileId = options.iamProfileId;\n    }\n    // the param names are shared between the authenticator and the token\n    // manager so we can just pass along the options object.\n    // also, the token manager will handle input validation\n    _this.tokenManager = new vpc_instance_token_manager_1.VpcInstanceTokenManager(options);\n    return _this;\n  }\n  /**\n   * Sets the \"iamProfileCrn\" value to be used when obtaining an IAM access token\n   * @param iamProfileCrn - the CRN of the linked IAM trusted profile to use when obtaining an IAM access token\n   */\n  VpcInstanceAuthenticator.prototype.setIamProfileCrn = function (iamProfileCrn) {\n    this.iamProfileCrn = iamProfileCrn;\n    // update properties in token manager\n    this.tokenManager.setIamProfileCrn(iamProfileCrn);\n  };\n  /**\n   * Sets the \"iamProfileId\" value to be used when obtaining an IAM access token\n   * @param iamProfileId - the ID of the linked IAM trusted profile to use when obtaining an IAM access token\n   */\n  VpcInstanceAuthenticator.prototype.setIamProfileId = function (iamProfileId) {\n    this.iamProfileId = iamProfileId;\n    // update properties in token manager\n    this.tokenManager.setIamProfileId(iamProfileId);\n  };\n  /**\n   * Returns the authenticator's type ('vpc').\n   *\n   * @returns a string that indicates the authenticator's type\n   */\n  // eslint-disable-next-line class-methods-use-this\n  VpcInstanceAuthenticator.prototype.authenticationType = function () {\n    return authenticator_1.Authenticator.AUTHTYPE_VPC;\n  };\n  return VpcInstanceAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator);\nexports.VpcInstanceAuthenticator = VpcInstanceAuthenticator;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","VpcInstanceAuthenticator","authenticator_1","require","vpc_instance_token_manager_1","token_request_based_authenticator_1","_super","options","_this","iamProfileCrn","iamProfileId","tokenManager","VpcInstanceTokenManager","setIamProfileCrn","setIamProfileId","authenticationType","Authenticator","AUTHTYPE_VPC","TokenRequestBasedAuthenticator"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/authenticators/vpc-instance-authenticator.js"],"sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2021, 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VpcInstanceAuthenticator = void 0;\nvar authenticator_1 = require(\"./authenticator\");\nvar vpc_instance_token_manager_1 = require(\"../token-managers/vpc-instance-token-manager\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The VpcInstanceAuthenticator implements an authentication scheme in which it retrieves an \"instance identity token\"\n * and exchanges that for an IAM access token using the VPC Instance Metadata Service API which is available on the local\n * compute resource (VM). The instance identity token is similar to an IAM apikey, except that it is managed automatically\n * by the compute resource provider (VPC).\n *\n * The resulting IAM access token is then added to outbound requests in an Authorization header\n *\n *      Authorization: Bearer \\<access-token\\>\n */\nvar VpcInstanceAuthenticator = /** @class */ (function (_super) {\n    __extends(VpcInstanceAuthenticator, _super);\n    /**\n     * Create a new VpcInstanceAuthenticator instance.\n     *\n     * @param options - Configuration options for VpcInstance authentication.\n     * This should be an object containing these fields:\n     * - url: (optional) the endpoint URL for the VPC Instance Metadata Service (default value: \"http://169.254.169.254\")\n     * - iamProfileCrn: (optional) the CRN of the linked IAM trusted profile to be used to obtain the IAM access token\n     * - iamProfileId: (optional) the ID of the linked IAM trusted profile to be used to obtain the IAM access token\n     *\n     * @remarks\n     * At most one of \"iamProfileCrn\" or \"iamProfileId\" may be specified. If neither one is specified,\n     * then the default IAM profile defined for the compute resource will be used.\n     */\n    function VpcInstanceAuthenticator(options) {\n        var _this = this;\n        // all parameters are optional\n        options = options || {};\n        _this = _super.call(this, options) || this;\n        if (options.iamProfileCrn) {\n            _this.iamProfileCrn = options.iamProfileCrn;\n        }\n        if (options.iamProfileId) {\n            _this.iamProfileId = options.iamProfileId;\n        }\n        // the param names are shared between the authenticator and the token\n        // manager so we can just pass along the options object.\n        // also, the token manager will handle input validation\n        _this.tokenManager = new vpc_instance_token_manager_1.VpcInstanceTokenManager(options);\n        return _this;\n    }\n    /**\n     * Sets the \"iamProfileCrn\" value to be used when obtaining an IAM access token\n     * @param iamProfileCrn - the CRN of the linked IAM trusted profile to use when obtaining an IAM access token\n     */\n    VpcInstanceAuthenticator.prototype.setIamProfileCrn = function (iamProfileCrn) {\n        this.iamProfileCrn = iamProfileCrn;\n        // update properties in token manager\n        this.tokenManager.setIamProfileCrn(iamProfileCrn);\n    };\n    /**\n     * Sets the \"iamProfileId\" value to be used when obtaining an IAM access token\n     * @param iamProfileId - the ID of the linked IAM trusted profile to use when obtaining an IAM access token\n     */\n    VpcInstanceAuthenticator.prototype.setIamProfileId = function (iamProfileId) {\n        this.iamProfileId = iamProfileId;\n        // update properties in token manager\n        this.tokenManager.setIamProfileId(iamProfileId);\n    };\n    /**\n     * Returns the authenticator's type ('vpc').\n     *\n     * @returns a string that indicates the authenticator's type\n     */\n    // eslint-disable-next-line class-methods-use-this\n    VpcInstanceAuthenticator.prototype.authenticationType = function () {\n        return authenticator_1.Authenticator.AUTHTYPE_VPC;\n    };\n    return VpcInstanceAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator));\nexports.VpcInstanceAuthenticator = VpcInstanceAuthenticator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}