{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromFile = exports.FileTokenizer = void 0;\nconst AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\nconst peek_readable_1 = require(\"peek-readable\");\nconst fs = require(\"./FsPromise\");\nclass FileTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n  constructor(fd, fileInfo) {\n    super(fileInfo);\n    this.fd = fd;\n  }\n  /**\r\n   * Read buffer from file\r\n   * @param uint8Array - Uint8Array to write result to\r\n   * @param options - Read behaviour options\r\n   * @returns Promise number of bytes read\r\n   */\n  async readBuffer(uint8Array, options) {\n    const normOptions = this.normalizeOptions(uint8Array, options);\n    this.position = normOptions.position;\n    const res = await fs.read(this.fd, uint8Array, normOptions.offset, normOptions.length, normOptions.position);\n    this.position += res.bytesRead;\n    if (res.bytesRead < normOptions.length && (!options || !options.mayBeLess)) {\n      throw new peek_readable_1.EndOfStreamError();\n    }\n    return res.bytesRead;\n  }\n  /**\r\n   * Peek buffer from file\r\n   * @param uint8Array - Uint8Array (or Buffer) to write data to\r\n   * @param options - Read behaviour options\r\n   * @returns Promise number of bytes read\r\n   */\n  async peekBuffer(uint8Array, options) {\n    const normOptions = this.normalizeOptions(uint8Array, options);\n    const res = await fs.read(this.fd, uint8Array, normOptions.offset, normOptions.length, normOptions.position);\n    if (!normOptions.mayBeLess && res.bytesRead < normOptions.length) {\n      throw new peek_readable_1.EndOfStreamError();\n    }\n    return res.bytesRead;\n  }\n  async close() {\n    return fs.close(this.fd);\n  }\n}\nexports.FileTokenizer = FileTokenizer;\nasync function fromFile(sourceFilePath) {\n  const stat = await fs.stat(sourceFilePath);\n  if (!stat.isFile) {\n    throw new Error(`File not a file: ${sourceFilePath}`);\n  }\n  const fd = await fs.open(sourceFilePath, 'r');\n  return new FileTokenizer(fd, {\n    path: sourceFilePath,\n    size: stat.size\n  });\n}\nexports.fromFile = fromFile;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromFile","FileTokenizer","AbstractTokenizer_1","require","peek_readable_1","fs","AbstractTokenizer","constructor","fd","fileInfo","readBuffer","uint8Array","options","normOptions","normalizeOptions","position","res","read","offset","length","bytesRead","mayBeLess","EndOfStreamError","peekBuffer","close","sourceFilePath","stat","isFile","Error","open","path","size"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/strtok3/lib/FileTokenizer.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromFile = exports.FileTokenizer = void 0;\r\nconst AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\r\nconst peek_readable_1 = require(\"peek-readable\");\r\nconst fs = require(\"./FsPromise\");\r\nclass FileTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\r\n    constructor(fd, fileInfo) {\r\n        super(fileInfo);\r\n        this.fd = fd;\r\n    }\r\n    /**\r\n     * Read buffer from file\r\n     * @param uint8Array - Uint8Array to write result to\r\n     * @param options - Read behaviour options\r\n     * @returns Promise number of bytes read\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        this.position = normOptions.position;\r\n        const res = await fs.read(this.fd, uint8Array, normOptions.offset, normOptions.length, normOptions.position);\r\n        this.position += res.bytesRead;\r\n        if (res.bytesRead < normOptions.length && (!options || !options.mayBeLess)) {\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        }\r\n        return res.bytesRead;\r\n    }\r\n    /**\r\n     * Peek buffer from file\r\n     * @param uint8Array - Uint8Array (or Buffer) to write data to\r\n     * @param options - Read behaviour options\r\n     * @returns Promise number of bytes read\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const res = await fs.read(this.fd, uint8Array, normOptions.offset, normOptions.length, normOptions.position);\r\n        if ((!normOptions.mayBeLess) && res.bytesRead < normOptions.length) {\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        }\r\n        return res.bytesRead;\r\n    }\r\n    async close() {\r\n        return fs.close(this.fd);\r\n    }\r\n}\r\nexports.FileTokenizer = FileTokenizer;\r\nasync function fromFile(sourceFilePath) {\r\n    const stat = await fs.stat(sourceFilePath);\r\n    if (!stat.isFile) {\r\n        throw new Error(`File not a file: ${sourceFilePath}`);\r\n    }\r\n    const fd = await fs.open(sourceFilePath, 'r');\r\n    return new FileTokenizer(fd, { path: sourceFilePath, size: stat.size });\r\n}\r\nexports.fromFile = fromFile;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACG,aAAa,GAAG,KAAK,CAAC;AACjD,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC1D,MAAMC,eAAe,GAAGD,OAAO,CAAC,eAAe,CAAC;AAChD,MAAME,EAAE,GAAGF,OAAO,CAAC,aAAa,CAAC;AACjC,MAAMF,aAAa,SAASC,mBAAmB,CAACI,iBAAiB,CAAC;EAC9DC,WAAWA,CAACC,EAAE,EAAEC,QAAQ,EAAE;IACtB,KAAK,CAACA,QAAQ,CAAC;IACf,IAAI,CAACD,EAAE,GAAGA,EAAE;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAME,UAAUA,CAACC,UAAU,EAAEC,OAAO,EAAE;IAClC,MAAMC,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACH,UAAU,EAAEC,OAAO,CAAC;IAC9D,IAAI,CAACG,QAAQ,GAAGF,WAAW,CAACE,QAAQ;IACpC,MAAMC,GAAG,GAAG,MAAMX,EAAE,CAACY,IAAI,CAAC,IAAI,CAACT,EAAE,EAAEG,UAAU,EAAEE,WAAW,CAACK,MAAM,EAAEL,WAAW,CAACM,MAAM,EAAEN,WAAW,CAACE,QAAQ,CAAC;IAC5G,IAAI,CAACA,QAAQ,IAAIC,GAAG,CAACI,SAAS;IAC9B,IAAIJ,GAAG,CAACI,SAAS,GAAGP,WAAW,CAACM,MAAM,KAAK,CAACP,OAAO,IAAI,CAACA,OAAO,CAACS,SAAS,CAAC,EAAE;MACxE,MAAM,IAAIjB,eAAe,CAACkB,gBAAgB,CAAC,CAAC;IAChD;IACA,OAAON,GAAG,CAACI,SAAS;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMG,UAAUA,CAACZ,UAAU,EAAEC,OAAO,EAAE;IAClC,MAAMC,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACH,UAAU,EAAEC,OAAO,CAAC;IAC9D,MAAMI,GAAG,GAAG,MAAMX,EAAE,CAACY,IAAI,CAAC,IAAI,CAACT,EAAE,EAAEG,UAAU,EAAEE,WAAW,CAACK,MAAM,EAAEL,WAAW,CAACM,MAAM,EAAEN,WAAW,CAACE,QAAQ,CAAC;IAC5G,IAAK,CAACF,WAAW,CAACQ,SAAS,IAAKL,GAAG,CAACI,SAAS,GAAGP,WAAW,CAACM,MAAM,EAAE;MAChE,MAAM,IAAIf,eAAe,CAACkB,gBAAgB,CAAC,CAAC;IAChD;IACA,OAAON,GAAG,CAACI,SAAS;EACxB;EACA,MAAMI,KAAKA,CAAA,EAAG;IACV,OAAOnB,EAAE,CAACmB,KAAK,CAAC,IAAI,CAAChB,EAAE,CAAC;EAC5B;AACJ;AACAV,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC,eAAeD,QAAQA,CAACyB,cAAc,EAAE;EACpC,MAAMC,IAAI,GAAG,MAAMrB,EAAE,CAACqB,IAAI,CAACD,cAAc,CAAC;EAC1C,IAAI,CAACC,IAAI,CAACC,MAAM,EAAE;IACd,MAAM,IAAIC,KAAK,CAAE,oBAAmBH,cAAe,EAAC,CAAC;EACzD;EACA,MAAMjB,EAAE,GAAG,MAAMH,EAAE,CAACwB,IAAI,CAACJ,cAAc,EAAE,GAAG,CAAC;EAC7C,OAAO,IAAIxB,aAAa,CAACO,EAAE,EAAE;IAAEsB,IAAI,EAAEL,cAAc;IAAEM,IAAI,EAAEL,IAAI,CAACK;EAAK,CAAC,CAAC;AAC3E;AACAjC,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}