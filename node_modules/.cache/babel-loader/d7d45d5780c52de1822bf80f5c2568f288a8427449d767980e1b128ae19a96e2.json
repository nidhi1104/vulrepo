{"ast":null,"code":"\"use strict\";\n\n/**\n * (C) Copyright IBM Corp. 2019, 2022.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAuthenticatorFromEnvironment = void 0;\nvar authenticators_1 = require(\"../authenticators\");\nvar read_external_sources_1 = require(\"./read-external-sources\");\n/**\n * Look for external configuration of authenticator.\n *\n * Try to get authenticator from external sources, with the following priority:\n * 1. Credentials file (ibm-credentials.env)\n * 2. Environment variables\n * 3. VCAP Services (Cloud Foundry)\n *\n * @param serviceName - the service name prefix.\n *\n */\nfunction getAuthenticatorFromEnvironment(serviceName) {\n  if (!serviceName) {\n    throw new Error('Service name is required.');\n  }\n  // construct the credentials object from the environment\n  var credentials = (0, read_external_sources_1.readExternalSources)(serviceName);\n  if (credentials === null) {\n    throw new Error('Unable to create an authenticator from the environment.');\n  }\n  // remove client-level properties\n  delete credentials.url;\n  delete credentials.disableSsl;\n  // convert \"auth\" properties to their proper keys\n  if (credentials.authUrl) {\n    credentials.url = credentials.authUrl;\n    delete credentials.authUrl;\n  }\n  if (credentials.authDisableSsl) {\n    credentials.disableSslVerification = credentials.authDisableSsl;\n    delete credentials.authDisableSsl;\n  }\n  // in the situation where the auth type is not provided:\n  // if an apikey is provided, default to IAM\n  // if not, default to container auth\n  var authType = credentials.authType;\n  if (!authType) {\n    // Support the alternate \"AUTHTYPE\" config property.\n    authType = credentials.authtype;\n  }\n  if (!authType || typeof authType !== 'string') {\n    authType = credentials.apikey ? authenticators_1.Authenticator.AUTHTYPE_IAM : authenticators_1.Authenticator.AUTHTYPE_CONTAINER;\n  }\n  // Create and return the appropriate authenticator.\n  var authenticator;\n  // Compare the authType against our constants case-insensitively to\n  // determine which authenticator type needs to be constructed.\n  authType = authType.toLowerCase();\n  if (authType === authenticators_1.Authenticator.AUTHTYPE_NOAUTH.toLowerCase()) {\n    authenticator = new authenticators_1.NoAuthAuthenticator();\n  } else if (authType === authenticators_1.Authenticator.AUTHTYPE_BASIC.toLowerCase()) {\n    authenticator = new authenticators_1.BasicAuthenticator(credentials);\n  } else if (authType === authenticators_1.Authenticator.AUTHTYPE_BEARERTOKEN.toLowerCase()) {\n    authenticator = new authenticators_1.BearerTokenAuthenticator(credentials);\n  } else if (authType === authenticators_1.Authenticator.AUTHTYPE_CP4D.toLowerCase()) {\n    authenticator = new authenticators_1.CloudPakForDataAuthenticator(credentials);\n  } else if (authType === authenticators_1.Authenticator.AUTHTYPE_IAM.toLowerCase()) {\n    authenticator = new authenticators_1.IamAuthenticator(credentials);\n  } else if (authType === authenticators_1.Authenticator.AUTHTYPE_CONTAINER.toLowerCase()) {\n    authenticator = new authenticators_1.ContainerAuthenticator(credentials);\n  } else if (authType === authenticators_1.Authenticator.AUTHTYPE_VPC.toLowerCase()) {\n    authenticator = new authenticators_1.VpcInstanceAuthenticator(credentials);\n  } else if (authType === authenticators_1.Authenticator.AUTHTYPE_MCSP.toLowerCase()) {\n    authenticator = new authenticators_1.McspAuthenticator(credentials);\n  } else {\n    throw new Error(\"Invalid value for AUTH_TYPE: \".concat(authType));\n  }\n  return authenticator;\n}\nexports.getAuthenticatorFromEnvironment = getAuthenticatorFromEnvironment;","map":{"version":3,"names":["Object","defineProperty","exports","value","getAuthenticatorFromEnvironment","authenticators_1","require","read_external_sources_1","serviceName","Error","credentials","readExternalSources","url","disableSsl","authUrl","authDisableSsl","disableSslVerification","authType","authtype","apikey","Authenticator","AUTHTYPE_IAM","AUTHTYPE_CONTAINER","authenticator","toLowerCase","AUTHTYPE_NOAUTH","NoAuthAuthenticator","AUTHTYPE_BASIC","BasicAuthenticator","AUTHTYPE_BEARERTOKEN","BearerTokenAuthenticator","AUTHTYPE_CP4D","CloudPakForDataAuthenticator","IamAuthenticator","ContainerAuthenticator","AUTHTYPE_VPC","VpcInstanceAuthenticator","AUTHTYPE_MCSP","McspAuthenticator","concat"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/utils/get-authenticator-from-environment.js"],"sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2019, 2022.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAuthenticatorFromEnvironment = void 0;\nvar authenticators_1 = require(\"../authenticators\");\nvar read_external_sources_1 = require(\"./read-external-sources\");\n/**\n * Look for external configuration of authenticator.\n *\n * Try to get authenticator from external sources, with the following priority:\n * 1. Credentials file (ibm-credentials.env)\n * 2. Environment variables\n * 3. VCAP Services (Cloud Foundry)\n *\n * @param serviceName - the service name prefix.\n *\n */\nfunction getAuthenticatorFromEnvironment(serviceName) {\n    if (!serviceName) {\n        throw new Error('Service name is required.');\n    }\n    // construct the credentials object from the environment\n    var credentials = (0, read_external_sources_1.readExternalSources)(serviceName);\n    if (credentials === null) {\n        throw new Error('Unable to create an authenticator from the environment.');\n    }\n    // remove client-level properties\n    delete credentials.url;\n    delete credentials.disableSsl;\n    // convert \"auth\" properties to their proper keys\n    if (credentials.authUrl) {\n        credentials.url = credentials.authUrl;\n        delete credentials.authUrl;\n    }\n    if (credentials.authDisableSsl) {\n        credentials.disableSslVerification = credentials.authDisableSsl;\n        delete credentials.authDisableSsl;\n    }\n    // in the situation where the auth type is not provided:\n    // if an apikey is provided, default to IAM\n    // if not, default to container auth\n    var authType = credentials.authType;\n    if (!authType) {\n        // Support the alternate \"AUTHTYPE\" config property.\n        authType = credentials.authtype;\n    }\n    if (!authType || typeof authType !== 'string') {\n        authType = credentials.apikey ? authenticators_1.Authenticator.AUTHTYPE_IAM : authenticators_1.Authenticator.AUTHTYPE_CONTAINER;\n    }\n    // Create and return the appropriate authenticator.\n    var authenticator;\n    // Compare the authType against our constants case-insensitively to\n    // determine which authenticator type needs to be constructed.\n    authType = authType.toLowerCase();\n    if (authType === authenticators_1.Authenticator.AUTHTYPE_NOAUTH.toLowerCase()) {\n        authenticator = new authenticators_1.NoAuthAuthenticator();\n    }\n    else if (authType === authenticators_1.Authenticator.AUTHTYPE_BASIC.toLowerCase()) {\n        authenticator = new authenticators_1.BasicAuthenticator(credentials);\n    }\n    else if (authType === authenticators_1.Authenticator.AUTHTYPE_BEARERTOKEN.toLowerCase()) {\n        authenticator = new authenticators_1.BearerTokenAuthenticator(credentials);\n    }\n    else if (authType === authenticators_1.Authenticator.AUTHTYPE_CP4D.toLowerCase()) {\n        authenticator = new authenticators_1.CloudPakForDataAuthenticator(credentials);\n    }\n    else if (authType === authenticators_1.Authenticator.AUTHTYPE_IAM.toLowerCase()) {\n        authenticator = new authenticators_1.IamAuthenticator(credentials);\n    }\n    else if (authType === authenticators_1.Authenticator.AUTHTYPE_CONTAINER.toLowerCase()) {\n        authenticator = new authenticators_1.ContainerAuthenticator(credentials);\n    }\n    else if (authType === authenticators_1.Authenticator.AUTHTYPE_VPC.toLowerCase()) {\n        authenticator = new authenticators_1.VpcInstanceAuthenticator(credentials);\n    }\n    else if (authType === authenticators_1.Authenticator.AUTHTYPE_MCSP.toLowerCase()) {\n        authenticator = new authenticators_1.McspAuthenticator(credentials);\n    }\n    else {\n        throw new Error(\"Invalid value for AUTH_TYPE: \".concat(authType));\n    }\n    return authenticator;\n}\nexports.getAuthenticatorFromEnvironment = getAuthenticatorFromEnvironment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}