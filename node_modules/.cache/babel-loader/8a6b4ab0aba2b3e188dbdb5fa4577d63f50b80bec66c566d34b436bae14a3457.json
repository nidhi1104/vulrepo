{"ast":null,"code":"\"use strict\";\n\n/**\n * (C) Copyright IBM Corp. 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.McspAuthenticator = void 0;\nvar authenticator_1 = require(\"./authenticator\");\nvar mcsp_token_manager_1 = require(\"../token-managers/mcsp-token-manager\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The McspAuthenticator uses an apikey to obtain an access token from the MCSP token server.\n * When the access token expires, a new access token is obtained from the token server.\n * The access token will be added to outbound requests via the Authorization header\n * of the form:    \"Authorization: Bearer <access-token>\"\n */\nvar McspAuthenticator = /** @class */function (_super) {\n  __extends(McspAuthenticator, _super);\n  /**\n   * Create a new McspAuthenticator instance.\n   *\n   * @param options - Configuration options for CloudPakForData authentication.\n   * This should be an object containing these fields:\n   * - url: (required) the endpoint URL for the CloudPakForData token service\n   * - username: (required) the username used to obtain a bearer token\n   * - password: (optional) the password used to obtain a bearer token (required if apikey is not specified)\n   * - apikey: (optional) the API key used to obtain a bearer token (required if password is not specified)\n   * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n   * should be disabled or not\n   * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n   *\n   * @throws Error: the username, password, and/or url are not valid, or unspecified, for Cloud Pak For Data token requests.\n   */\n  function McspAuthenticator(options) {\n    var _this = _super.call(this, options) || this;\n    _this.requiredOptions = ['apikey', 'url'];\n    _this.apikey = options.apikey;\n    _this.url = options.url;\n    // the param names are shared between the authenticator and the token\n    // manager so we can just pass along the options object.\n    // also, the token manager will handle input validation\n    _this.tokenManager = new mcsp_token_manager_1.McspTokenManager(options);\n    return _this;\n  }\n  /**\n   * Returns the authenticator's type ('cp4d').\n   *\n   * @returns a string that indicates the authenticator's type\n   */\n  // eslint-disable-next-line class-methods-use-this\n  McspAuthenticator.prototype.authenticationType = function () {\n    return authenticator_1.Authenticator.AUTHTYPE_MCSP;\n  };\n  return McspAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator);\nexports.McspAuthenticator = McspAuthenticator;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","McspAuthenticator","authenticator_1","require","mcsp_token_manager_1","token_request_based_authenticator_1","_super","options","_this","requiredOptions","apikey","url","tokenManager","McspTokenManager","authenticationType","Authenticator","AUTHTYPE_MCSP","TokenRequestBasedAuthenticator"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/authenticators/mcsp-authenticator.js"],"sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.McspAuthenticator = void 0;\nvar authenticator_1 = require(\"./authenticator\");\nvar mcsp_token_manager_1 = require(\"../token-managers/mcsp-token-manager\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The McspAuthenticator uses an apikey to obtain an access token from the MCSP token server.\n * When the access token expires, a new access token is obtained from the token server.\n * The access token will be added to outbound requests via the Authorization header\n * of the form:    \"Authorization: Bearer <access-token>\"\n */\nvar McspAuthenticator = /** @class */ (function (_super) {\n    __extends(McspAuthenticator, _super);\n    /**\n     * Create a new McspAuthenticator instance.\n     *\n     * @param options - Configuration options for CloudPakForData authentication.\n     * This should be an object containing these fields:\n     * - url: (required) the endpoint URL for the CloudPakForData token service\n     * - username: (required) the username used to obtain a bearer token\n     * - password: (optional) the password used to obtain a bearer token (required if apikey is not specified)\n     * - apikey: (optional) the API key used to obtain a bearer token (required if password is not specified)\n     * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n     * should be disabled or not\n     * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n     *\n     * @throws Error: the username, password, and/or url are not valid, or unspecified, for Cloud Pak For Data token requests.\n     */\n    function McspAuthenticator(options) {\n        var _this = _super.call(this, options) || this;\n        _this.requiredOptions = ['apikey', 'url'];\n        _this.apikey = options.apikey;\n        _this.url = options.url;\n        // the param names are shared between the authenticator and the token\n        // manager so we can just pass along the options object.\n        // also, the token manager will handle input validation\n        _this.tokenManager = new mcsp_token_manager_1.McspTokenManager(options);\n        return _this;\n    }\n    /**\n     * Returns the authenticator's type ('cp4d').\n     *\n     * @returns a string that indicates the authenticator's type\n     */\n    // eslint-disable-next-line class-methods-use-this\n    McspAuthenticator.prototype.authenticationType = function () {\n        return authenticator_1.Authenticator.AUTHTYPE_MCSP;\n    };\n    return McspAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator));\nexports.McspAuthenticator = McspAuthenticator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}