{"ast":null,"code":"\"use strict\";\n\n/**\n * (C) Copyright IBM Corp. 2019, 2024.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IamRequestBasedTokenManager = void 0;\nvar extend_1 = __importDefault(require(\"extend\"));\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\nvar helpers_1 = require(\"../utils/helpers\");\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\nvar CLIENT_ID_SECRET_WARNING = 'Warning: Client ID and Secret must BOTH be given, or the header will not be included.';\nvar DEFAULT_IAM_URL = 'https://iam.cloud.ibm.com';\nvar OPERATION_PATH = '/identity/token';\nvar IAM_EXPIRATION_WINDOW = 10;\n/**\n * The IamRequestBasedTokenManager class contains code relevant to any token manager that\n * interacts with the IAM service to manage a token. It stores information relevant to all\n * IAM requests, such as the client ID and secret, and performs the token request with a set\n * of request options common to any IAM token management scheme. It is intended that this\n * class be extended with specific implementations.\n */\nvar IamRequestBasedTokenManager = /** @class */function (_super) {\n  __extends(IamRequestBasedTokenManager, _super);\n  /**\n   *\n   * Create a new IamRequestBasedTokenManager instance.\n   *\n   * @param options - Configuration options.\n   * This should be an object containing these fields:\n   * - url: (optional) the endpoint URL for the token service (default value: \"https://iam.cloud.ibm.com\")\n   * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n   * should be disabled or not\n   * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n   * - clientId: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n   * Authorization header to be included in each request to the token service\n   * - clientSecret: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n   * Authorization header to be included in each request to the token service\n   * - scope: (optional) the \"scope\" parameter to use when fetching the bearer token from the token service\n   *\n   * @throws Error: the configuration options are not valid.\n   */\n  function IamRequestBasedTokenManager(options) {\n    var _this = this;\n    // all parameters are optional\n    options = options || {};\n    _this = _super.call(this, options) || this;\n    // Canonicalize the URL by removing the operation path if it was specified by the user.\n    _this.url = _this.url ? (0, helpers_1.removeSuffix)(_this.url, OPERATION_PATH) : DEFAULT_IAM_URL;\n    if (options.clientId) {\n      _this.clientId = options.clientId;\n    }\n    if (options.clientSecret) {\n      _this.clientSecret = options.clientSecret;\n    }\n    if (options.scope) {\n      _this.scope = options.scope;\n    }\n    if ((0, helpers_1.onlyOne)(options.clientId, options.clientSecret)) {\n      // tslint:disable-next-line\n      logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n    }\n    // initialize the form data object\n    _this.formData = {};\n    return _this;\n  }\n  /**\n   * Sets the IAM \"scope\" value.\n   * This value is sent as the \"scope\" form parameter within the request sent to the IAM token service.\n   *\n   * @param scope - a space-separated string that contains one or more scope names\n   */\n  IamRequestBasedTokenManager.prototype.setScope = function (scope) {\n    this.scope = scope;\n  };\n  /**\n   * Sets the IAM \"clientId\" and \"clientSecret\" values.\n   * These values are used to compute the Authorization header used\n   * when retrieving the IAM access token.\n   * If these values are not set, no Authorization header will be\n   * set on the request (it is not required).\n   *\n   * @param clientId - the client id.\n   * @param clientSecret - the client secret.\n   */\n  IamRequestBasedTokenManager.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    if ((0, helpers_1.onlyOne)(clientId, clientSecret)) {\n      // tslint:disable-next-line\n      logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n    }\n  };\n  /**\n   * Returns the most recently stored refresh token.\n   *\n   * @returns the refresh token\n   */\n  IamRequestBasedTokenManager.prototype.getRefreshToken = function () {\n    return this.refreshToken;\n  };\n  /**\n   * Extend this method from the parent class to extract the refresh token from\n   * the request and save it.\n   *\n   * @param tokenResponse - the response object from JWT service request\n   */\n  IamRequestBasedTokenManager.prototype.saveTokenInfo = function (tokenResponse) {\n    _super.prototype.saveTokenInfo.call(this, tokenResponse);\n    var responseBody = tokenResponse.result || {};\n    if (responseBody.refresh_token) {\n      this.refreshToken = responseBody.refresh_token;\n    }\n  };\n  /**\n   * Request an IAM access token using an API key.\n   *\n   * @returns Promise\n   */\n  IamRequestBasedTokenManager.prototype.requestToken = function () {\n    // these cannot be overwritten\n    var requiredHeaders = {\n      'Content-type': 'application/x-www-form-urlencoded'\n    };\n    // If both the clientId and secret were specified by the user, then use them.\n    if (this.clientId && this.clientSecret) {\n      requiredHeaders.Authorization = (0, helpers_1.computeBasicAuthHeader)(this.clientId, this.clientSecret);\n    }\n    if (this.scope) {\n      this.formData.scope = this.scope;\n    }\n    var parameters = {\n      options: {\n        url: this.url + OPERATION_PATH,\n        method: 'POST',\n        headers: (0, extend_1.default)(true, {}, this.headers, requiredHeaders),\n        form: this.formData,\n        rejectUnauthorized: !this.disableSslVerification\n      }\n    };\n    return this.requestWrapperInstance.sendRequest(parameters);\n  };\n  /**\n   * Returns true iff the currently-cached IAM access token is expired.\n   * We'll consider an access token as expired when we reach its IAM server-reported\n   * expiration time minus our expiration window (10 secs).\n   * We do this to avoid using an access token that might expire in the middle of a long-running\n   * transaction within an IBM Cloud service.\n   *\n   * @returns true if the token has expired, false otherwise\n   */\n  IamRequestBasedTokenManager.prototype.isTokenExpired = function () {\n    var expireTime = this.expireTime;\n    if (!expireTime) {\n      return true;\n    }\n    var currentTime = (0, helpers_1.getCurrentTime)();\n    return currentTime >= expireTime - IAM_EXPIRATION_WINDOW;\n  };\n  return IamRequestBasedTokenManager;\n}(jwt_token_manager_1.JwtTokenManager);\nexports.IamRequestBasedTokenManager = IamRequestBasedTokenManager;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__importDefault","mod","__esModule","defineProperty","exports","value","IamRequestBasedTokenManager","extend_1","require","logger_1","helpers_1","jwt_token_manager_1","CLIENT_ID_SECRET_WARNING","DEFAULT_IAM_URL","OPERATION_PATH","IAM_EXPIRATION_WINDOW","_super","options","_this","url","removeSuffix","clientId","clientSecret","scope","onlyOne","default","warn","formData","setScope","setClientIdAndSecret","getRefreshToken","refreshToken","saveTokenInfo","tokenResponse","responseBody","result","refresh_token","requestToken","requiredHeaders","Authorization","computeBasicAuthHeader","parameters","method","headers","form","rejectUnauthorized","disableSslVerification","requestWrapperInstance","sendRequest","isTokenExpired","expireTime","currentTime","getCurrentTime","JwtTokenManager"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/token-managers/iam-request-based-token-manager.js"],"sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2019, 2024.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IamRequestBasedTokenManager = void 0;\nvar extend_1 = __importDefault(require(\"extend\"));\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\nvar helpers_1 = require(\"../utils/helpers\");\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\nvar CLIENT_ID_SECRET_WARNING = 'Warning: Client ID and Secret must BOTH be given, or the header will not be included.';\nvar DEFAULT_IAM_URL = 'https://iam.cloud.ibm.com';\nvar OPERATION_PATH = '/identity/token';\nvar IAM_EXPIRATION_WINDOW = 10;\n/**\n * The IamRequestBasedTokenManager class contains code relevant to any token manager that\n * interacts with the IAM service to manage a token. It stores information relevant to all\n * IAM requests, such as the client ID and secret, and performs the token request with a set\n * of request options common to any IAM token management scheme. It is intended that this\n * class be extended with specific implementations.\n */\nvar IamRequestBasedTokenManager = /** @class */ (function (_super) {\n    __extends(IamRequestBasedTokenManager, _super);\n    /**\n     *\n     * Create a new IamRequestBasedTokenManager instance.\n     *\n     * @param options - Configuration options.\n     * This should be an object containing these fields:\n     * - url: (optional) the endpoint URL for the token service (default value: \"https://iam.cloud.ibm.com\")\n     * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n     * should be disabled or not\n     * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n     * - clientId: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n     * Authorization header to be included in each request to the token service\n     * - clientSecret: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n     * Authorization header to be included in each request to the token service\n     * - scope: (optional) the \"scope\" parameter to use when fetching the bearer token from the token service\n     *\n     * @throws Error: the configuration options are not valid.\n     */\n    function IamRequestBasedTokenManager(options) {\n        var _this = this;\n        // all parameters are optional\n        options = options || {};\n        _this = _super.call(this, options) || this;\n        // Canonicalize the URL by removing the operation path if it was specified by the user.\n        _this.url = _this.url ? (0, helpers_1.removeSuffix)(_this.url, OPERATION_PATH) : DEFAULT_IAM_URL;\n        if (options.clientId) {\n            _this.clientId = options.clientId;\n        }\n        if (options.clientSecret) {\n            _this.clientSecret = options.clientSecret;\n        }\n        if (options.scope) {\n            _this.scope = options.scope;\n        }\n        if ((0, helpers_1.onlyOne)(options.clientId, options.clientSecret)) {\n            // tslint:disable-next-line\n            logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n        }\n        // initialize the form data object\n        _this.formData = {};\n        return _this;\n    }\n    /**\n     * Sets the IAM \"scope\" value.\n     * This value is sent as the \"scope\" form parameter within the request sent to the IAM token service.\n     *\n     * @param scope - a space-separated string that contains one or more scope names\n     */\n    IamRequestBasedTokenManager.prototype.setScope = function (scope) {\n        this.scope = scope;\n    };\n    /**\n     * Sets the IAM \"clientId\" and \"clientSecret\" values.\n     * These values are used to compute the Authorization header used\n     * when retrieving the IAM access token.\n     * If these values are not set, no Authorization header will be\n     * set on the request (it is not required).\n     *\n     * @param clientId - the client id.\n     * @param clientSecret - the client secret.\n     */\n    IamRequestBasedTokenManager.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        if ((0, helpers_1.onlyOne)(clientId, clientSecret)) {\n            // tslint:disable-next-line\n            logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n        }\n    };\n    /**\n     * Returns the most recently stored refresh token.\n     *\n     * @returns the refresh token\n     */\n    IamRequestBasedTokenManager.prototype.getRefreshToken = function () {\n        return this.refreshToken;\n    };\n    /**\n     * Extend this method from the parent class to extract the refresh token from\n     * the request and save it.\n     *\n     * @param tokenResponse - the response object from JWT service request\n     */\n    IamRequestBasedTokenManager.prototype.saveTokenInfo = function (tokenResponse) {\n        _super.prototype.saveTokenInfo.call(this, tokenResponse);\n        var responseBody = tokenResponse.result || {};\n        if (responseBody.refresh_token) {\n            this.refreshToken = responseBody.refresh_token;\n        }\n    };\n    /**\n     * Request an IAM access token using an API key.\n     *\n     * @returns Promise\n     */\n    IamRequestBasedTokenManager.prototype.requestToken = function () {\n        // these cannot be overwritten\n        var requiredHeaders = {\n            'Content-type': 'application/x-www-form-urlencoded',\n        };\n        // If both the clientId and secret were specified by the user, then use them.\n        if (this.clientId && this.clientSecret) {\n            requiredHeaders.Authorization = (0, helpers_1.computeBasicAuthHeader)(this.clientId, this.clientSecret);\n        }\n        if (this.scope) {\n            this.formData.scope = this.scope;\n        }\n        var parameters = {\n            options: {\n                url: this.url + OPERATION_PATH,\n                method: 'POST',\n                headers: (0, extend_1.default)(true, {}, this.headers, requiredHeaders),\n                form: this.formData,\n                rejectUnauthorized: !this.disableSslVerification,\n            },\n        };\n        return this.requestWrapperInstance.sendRequest(parameters);\n    };\n    /**\n     * Returns true iff the currently-cached IAM access token is expired.\n     * We'll consider an access token as expired when we reach its IAM server-reported\n     * expiration time minus our expiration window (10 secs).\n     * We do this to avoid using an access token that might expire in the middle of a long-running\n     * transaction within an IBM Cloud service.\n     *\n     * @returns true if the token has expired, false otherwise\n     */\n    IamRequestBasedTokenManager.prototype.isTokenExpired = function () {\n        var expireTime = this.expireTime;\n        if (!expireTime) {\n            return true;\n        }\n        var currentTime = (0, helpers_1.getCurrentTime)();\n        return currentTime >= expireTime - IAM_EXPIRATION_WINDOW;\n    };\n    return IamRequestBasedTokenManager;\n}(jwt_token_manager_1.JwtTokenManager));\nexports.IamRequestBasedTokenManager = IamRequestBasedTokenManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}