{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2021, 2023 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCrTokenFile = exports.constructFilepath = exports.fileExistsAtPath = exports.readCredentialsFile = void 0;\nvar dotenv_1 = require(\"dotenv\");\nvar fs_1 = require(\"fs\");\nvar os_1 = require(\"os\");\nvar path_1 = require(\"path\");\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\n// Putting all file-reading related code in this file to isolate the usage of the\n// `fs` module, as it causes problems in browser environments.\nvar defaultCredsFilename = 'ibm-credentials.env';\n/**\n * Return a config object based on a credentials file. Credentials files can\n * be specified filepath via the environment variable: `IBM_CREDENTIALS_FILE`.\n */\nfunction readCredentialsFile() {\n  if (!fs_1.existsSync) {\n    return {};\n  }\n  // first look for an env variable called IBM_CREDENTIALS_FILE\n  // it should be the path to the file\n  // then look at the current working directory\n  // then at the os-dependent home directory\n  var givenFilepath = process.env.IBM_CREDENTIALS_FILE || '';\n  var workingDir = constructFilepath(process.cwd());\n  var homeDir = constructFilepath((0, os_1.homedir)());\n  var filepathToUse;\n  if (givenFilepath) {\n    if (fileExistsAtPath(givenFilepath)) {\n      // see if user gave a path to a file named something other than `ibm-credentials.env`\n      filepathToUse = givenFilepath;\n    } else if (fileExistsAtPath(constructFilepath(givenFilepath))) {\n      // see if user gave a path to the directory where file is located\n      filepathToUse = constructFilepath(givenFilepath);\n    }\n  } else if (fileExistsAtPath(workingDir)) {\n    filepathToUse = workingDir;\n  } else if (fileExistsAtPath(homeDir)) {\n    filepathToUse = homeDir;\n  } else {\n    // file does not exist anywhere, will not be used\n    logger_1.default.info('Credential file does not exist. Will not be used');\n    return {};\n  }\n  var credsFile = (0, fs_1.readFileSync)(filepathToUse);\n  return (0, dotenv_1.parse)(credsFile);\n}\nexports.readCredentialsFile = readCredentialsFile;\nfunction fileExistsAtPath(filepath) {\n  if ((0, fs_1.existsSync)(filepath)) {\n    var stats = (0, fs_1.lstatSync)(filepath);\n    return stats.isFile() || stats.isSymbolicLink();\n  }\n  return false;\n}\nexports.fileExistsAtPath = fileExistsAtPath;\nfunction constructFilepath(filepath) {\n  // ensure filepath includes the filename\n  if (!filepath.endsWith(defaultCredsFilename)) {\n    filepath = (0, path_1.join)(filepath, defaultCredsFilename);\n  }\n  return filepath;\n}\nexports.constructFilepath = constructFilepath;\nfunction readCrTokenFile(filepath) {\n  if (!fs_1.existsSync) {\n    return '';\n  }\n  try {\n    var token = '';\n    logger_1.default.debug(\"Attempting to read CR token from file: \".concat(filepath));\n    token = (0, fs_1.readFileSync)(filepath, 'utf8');\n    logger_1.default.debug(\"Successfully read CR token from file: \".concat(filepath));\n    return token;\n  } catch (err) {\n    var msg = \"Error reading CR token: \".concat(err.toString());\n    logger_1.default.debug(msg);\n    throw new Error(msg);\n  }\n}\nexports.readCrTokenFile = readCrTokenFile;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","readCrTokenFile","constructFilepath","fileExistsAtPath","readCredentialsFile","dotenv_1","require","fs_1","os_1","path_1","logger_1","defaultCredsFilename","existsSync","givenFilepath","process","env","IBM_CREDENTIALS_FILE","workingDir","cwd","homeDir","homedir","filepathToUse","default","info","credsFile","readFileSync","parse","filepath","stats","lstatSync","isFile","isSymbolicLink","endsWith","join","token","debug","concat","err","msg","toString","Error"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/utils/file-reading-helpers.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2021, 2023 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readCrTokenFile = exports.constructFilepath = exports.fileExistsAtPath = exports.readCredentialsFile = void 0;\nvar dotenv_1 = require(\"dotenv\");\nvar fs_1 = require(\"fs\");\nvar os_1 = require(\"os\");\nvar path_1 = require(\"path\");\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\n// Putting all file-reading related code in this file to isolate the usage of the\n// `fs` module, as it causes problems in browser environments.\nvar defaultCredsFilename = 'ibm-credentials.env';\n/**\n * Return a config object based on a credentials file. Credentials files can\n * be specified filepath via the environment variable: `IBM_CREDENTIALS_FILE`.\n */\nfunction readCredentialsFile() {\n    if (!fs_1.existsSync) {\n        return {};\n    }\n    // first look for an env variable called IBM_CREDENTIALS_FILE\n    // it should be the path to the file\n    // then look at the current working directory\n    // then at the os-dependent home directory\n    var givenFilepath = process.env.IBM_CREDENTIALS_FILE || '';\n    var workingDir = constructFilepath(process.cwd());\n    var homeDir = constructFilepath((0, os_1.homedir)());\n    var filepathToUse;\n    if (givenFilepath) {\n        if (fileExistsAtPath(givenFilepath)) {\n            // see if user gave a path to a file named something other than `ibm-credentials.env`\n            filepathToUse = givenFilepath;\n        }\n        else if (fileExistsAtPath(constructFilepath(givenFilepath))) {\n            // see if user gave a path to the directory where file is located\n            filepathToUse = constructFilepath(givenFilepath);\n        }\n    }\n    else if (fileExistsAtPath(workingDir)) {\n        filepathToUse = workingDir;\n    }\n    else if (fileExistsAtPath(homeDir)) {\n        filepathToUse = homeDir;\n    }\n    else {\n        // file does not exist anywhere, will not be used\n        logger_1.default.info('Credential file does not exist. Will not be used');\n        return {};\n    }\n    var credsFile = (0, fs_1.readFileSync)(filepathToUse);\n    return (0, dotenv_1.parse)(credsFile);\n}\nexports.readCredentialsFile = readCredentialsFile;\nfunction fileExistsAtPath(filepath) {\n    if ((0, fs_1.existsSync)(filepath)) {\n        var stats = (0, fs_1.lstatSync)(filepath);\n        return stats.isFile() || stats.isSymbolicLink();\n    }\n    return false;\n}\nexports.fileExistsAtPath = fileExistsAtPath;\nfunction constructFilepath(filepath) {\n    // ensure filepath includes the filename\n    if (!filepath.endsWith(defaultCredsFilename)) {\n        filepath = (0, path_1.join)(filepath, defaultCredsFilename);\n    }\n    return filepath;\n}\nexports.constructFilepath = constructFilepath;\nfunction readCrTokenFile(filepath) {\n    if (!fs_1.existsSync) {\n        return '';\n    }\n    try {\n        var token = '';\n        logger_1.default.debug(\"Attempting to read CR token from file: \".concat(filepath));\n        token = (0, fs_1.readFileSync)(filepath, 'utf8');\n        logger_1.default.debug(\"Successfully read CR token from file: \".concat(filepath));\n        return token;\n    }\n    catch (err) {\n        var msg = \"Error reading CR token: \".concat(err.toString());\n        logger_1.default.debug(msg);\n        throw new Error(msg);\n    }\n}\nexports.readCrTokenFile = readCrTokenFile;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,iBAAiB,GAAGH,OAAO,CAACI,gBAAgB,GAAGJ,OAAO,CAACK,mBAAmB,GAAG,KAAK,CAAC;AACrH,IAAIC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAIC,IAAI,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,IAAIE,IAAI,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,IAAIG,MAAM,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAII,QAAQ,GAAGhB,eAAe,CAACY,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAC3D;AACA;AACA,IAAIK,oBAAoB,GAAG,qBAAqB;AAChD;AACA;AACA;AACA;AACA,SAASP,mBAAmBA,CAAA,EAAG;EAC3B,IAAI,CAACG,IAAI,CAACK,UAAU,EAAE;IAClB,OAAO,CAAC,CAAC;EACb;EACA;EACA;EACA;EACA;EACA,IAAIC,aAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,EAAE;EAC1D,IAAIC,UAAU,GAAGf,iBAAiB,CAACY,OAAO,CAACI,GAAG,CAAC,CAAC,CAAC;EACjD,IAAIC,OAAO,GAAGjB,iBAAiB,CAAC,CAAC,CAAC,EAAEM,IAAI,CAACY,OAAO,EAAE,CAAC,CAAC;EACpD,IAAIC,aAAa;EACjB,IAAIR,aAAa,EAAE;IACf,IAAIV,gBAAgB,CAACU,aAAa,CAAC,EAAE;MACjC;MACAQ,aAAa,GAAGR,aAAa;IACjC,CAAC,MACI,IAAIV,gBAAgB,CAACD,iBAAiB,CAACW,aAAa,CAAC,CAAC,EAAE;MACzD;MACAQ,aAAa,GAAGnB,iBAAiB,CAACW,aAAa,CAAC;IACpD;EACJ,CAAC,MACI,IAAIV,gBAAgB,CAACc,UAAU,CAAC,EAAE;IACnCI,aAAa,GAAGJ,UAAU;EAC9B,CAAC,MACI,IAAId,gBAAgB,CAACgB,OAAO,CAAC,EAAE;IAChCE,aAAa,GAAGF,OAAO;EAC3B,CAAC,MACI;IACD;IACAT,QAAQ,CAACY,OAAO,CAACC,IAAI,CAAC,kDAAkD,CAAC;IACzE,OAAO,CAAC,CAAC;EACb;EACA,IAAIC,SAAS,GAAG,CAAC,CAAC,EAAEjB,IAAI,CAACkB,YAAY,EAAEJ,aAAa,CAAC;EACrD,OAAO,CAAC,CAAC,EAAEhB,QAAQ,CAACqB,KAAK,EAAEF,SAAS,CAAC;AACzC;AACAzB,OAAO,CAACK,mBAAmB,GAAGA,mBAAmB;AACjD,SAASD,gBAAgBA,CAACwB,QAAQ,EAAE;EAChC,IAAI,CAAC,CAAC,EAAEpB,IAAI,CAACK,UAAU,EAAEe,QAAQ,CAAC,EAAE;IAChC,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAErB,IAAI,CAACsB,SAAS,EAAEF,QAAQ,CAAC;IACzC,OAAOC,KAAK,CAACE,MAAM,CAAC,CAAC,IAAIF,KAAK,CAACG,cAAc,CAAC,CAAC;EACnD;EACA,OAAO,KAAK;AAChB;AACAhC,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3C,SAASD,iBAAiBA,CAACyB,QAAQ,EAAE;EACjC;EACA,IAAI,CAACA,QAAQ,CAACK,QAAQ,CAACrB,oBAAoB,CAAC,EAAE;IAC1CgB,QAAQ,GAAG,CAAC,CAAC,EAAElB,MAAM,CAACwB,IAAI,EAAEN,QAAQ,EAAEhB,oBAAoB,CAAC;EAC/D;EACA,OAAOgB,QAAQ;AACnB;AACA5B,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7C,SAASD,eAAeA,CAAC0B,QAAQ,EAAE;EAC/B,IAAI,CAACpB,IAAI,CAACK,UAAU,EAAE;IAClB,OAAO,EAAE;EACb;EACA,IAAI;IACA,IAAIsB,KAAK,GAAG,EAAE;IACdxB,QAAQ,CAACY,OAAO,CAACa,KAAK,CAAC,yCAAyC,CAACC,MAAM,CAACT,QAAQ,CAAC,CAAC;IAClFO,KAAK,GAAG,CAAC,CAAC,EAAE3B,IAAI,CAACkB,YAAY,EAAEE,QAAQ,EAAE,MAAM,CAAC;IAChDjB,QAAQ,CAACY,OAAO,CAACa,KAAK,CAAC,wCAAwC,CAACC,MAAM,CAACT,QAAQ,CAAC,CAAC;IACjF,OAAOO,KAAK;EAChB,CAAC,CACD,OAAOG,GAAG,EAAE;IACR,IAAIC,GAAG,GAAG,0BAA0B,CAACF,MAAM,CAACC,GAAG,CAACE,QAAQ,CAAC,CAAC,CAAC;IAC3D7B,QAAQ,CAACY,OAAO,CAACa,KAAK,CAACG,GAAG,CAAC;IAC3B,MAAM,IAAIE,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ;AACAvC,OAAO,CAACE,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}