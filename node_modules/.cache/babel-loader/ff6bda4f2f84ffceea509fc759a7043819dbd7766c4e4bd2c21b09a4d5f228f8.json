{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable prettier/prettier */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * (C) Copyright IBM Corp. 2019, 2022.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar path_1 = require(\"path\");\n// This module attempts to identify common content-types based on the filename or header\n// It is not exhaustive, and for best results, you should always manually specify the content-type option.\n// See the complete list of supported content-types at\n// https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-input#formats\n// *some* file types can be identified by the first 3-4 bytes of the file\nvar headerContentTypes = {\n  fLaC: 'audio/flac',\n  RIFF: 'audio/wav',\n  OggS: 'audio/ogg',\n  ID3: 'audio/mp3',\n  '\\u001aEߣ': 'audio/webm' // String for first four hex's of webm: [1A][45][DF][A3] (https://www.matroska.org/technical/specs/index.html#EBML)\n};\nvar filenameContentTypes = {\n  '.mp3': 'audio/mp3',\n  '.wav': 'audio/wav',\n  '.flac': 'audio/flac',\n  '.ogg': 'audio/ogg',\n  '.oga': 'audio/ogg',\n  '.opus': 'audio/ogg; codec=opus',\n  '.webm': 'audio/webm'\n};\n/**\n * Takes the beginning of an audio file and returns the associated content-type / mime type\n *\n * @param buffer - a Buffer containing at least the first 4 bytes of the file\n * @return sthe contentType or undefined\n */\nvar fromHeader = function (buffer) {\n  var headerStr = buffer.slice(0, 4).toString().substr(0, 4);\n  // mp3's are only consistent for the first 3 characters\n  return headerContentTypes[headerStr] || headerContentTypes[headerStr.substr(0, 3)];\n};\n/**\n * Guess the content type from the filename\n *\n * Note: Blob and File objects include a .type property, but we're ignoring it because it's frequently either\n * incorrect (e.g. video/ogg instead of audio/ogg) or else a different format than what's expected (e.g. audio/x-wav)\n *\n * @param file - a String filename or url, or binary File/Blob object.\n * @returns the content type\n */\nvar fromFilename = function (file) {\n  var ext = (0, path_1.extname)(\n  // eslint-disable-next-line @typescript-eslint/dot-notation\n  typeof file === 'string' && file || file['name'] || '');\n  return filenameContentTypes[ext];\n};\nexports.default = {\n  fromFilename: fromFilename,\n  fromHeader: fromHeader\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","path_1","require","headerContentTypes","fLaC","RIFF","OggS","ID3","filenameContentTypes","fromHeader","buffer","headerStr","slice","toString","substr","fromFilename","file","ext","extname","default"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/lib/content-type.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable prettier/prettier */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * (C) Copyright IBM Corp. 2019, 2022.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar path_1 = require(\"path\");\n// This module attempts to identify common content-types based on the filename or header\n// It is not exhaustive, and for best results, you should always manually specify the content-type option.\n// See the complete list of supported content-types at\n// https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-input#formats\n// *some* file types can be identified by the first 3-4 bytes of the file\nvar headerContentTypes = {\n    fLaC: 'audio/flac',\n    RIFF: 'audio/wav',\n    OggS: 'audio/ogg',\n    ID3: 'audio/mp3',\n    '\\u001aEߣ': 'audio/webm' // String for first four hex's of webm: [1A][45][DF][A3] (https://www.matroska.org/technical/specs/index.html#EBML)\n};\nvar filenameContentTypes = {\n    '.mp3': 'audio/mp3',\n    '.wav': 'audio/wav',\n    '.flac': 'audio/flac',\n    '.ogg': 'audio/ogg',\n    '.oga': 'audio/ogg',\n    '.opus': 'audio/ogg; codec=opus',\n    '.webm': 'audio/webm'\n};\n/**\n * Takes the beginning of an audio file and returns the associated content-type / mime type\n *\n * @param buffer - a Buffer containing at least the first 4 bytes of the file\n * @return sthe contentType or undefined\n */\nvar fromHeader = function (buffer) {\n    var headerStr = buffer\n        .slice(0, 4)\n        .toString()\n        .substr(0, 4);\n    // mp3's are only consistent for the first 3 characters\n    return (headerContentTypes[headerStr] || headerContentTypes[headerStr.substr(0, 3)]);\n};\n/**\n * Guess the content type from the filename\n *\n * Note: Blob and File objects include a .type property, but we're ignoring it because it's frequently either\n * incorrect (e.g. video/ogg instead of audio/ogg) or else a different format than what's expected (e.g. audio/x-wav)\n *\n * @param file - a String filename or url, or binary File/Blob object.\n * @returns the content type\n */\nvar fromFilename = function (file) {\n    var ext = (0, path_1.extname)(\n    // eslint-disable-next-line @typescript-eslint/dot-notation\n    (typeof file === 'string' && file) || file['name'] || '');\n    return filenameContentTypes[ext];\n};\nexports.default = {\n    fromFilename: fromFilename,\n    fromHeader: fromHeader\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA,IAAIC,kBAAkB,GAAG;EACrBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,WAAW;EACjBC,GAAG,EAAE,WAAW;EAChB,UAAU,EAAE,YAAY,CAAC;AAC7B,CAAC;AACD,IAAIC,oBAAoB,GAAG;EACvB,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,WAAW;EACnB,OAAO,EAAE,YAAY;EACrB,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,WAAW;EACnB,OAAO,EAAE,uBAAuB;EAChC,OAAO,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,SAAAA,CAAUC,MAAM,EAAE;EAC/B,IAAIC,SAAS,GAAGD,MAAM,CACjBE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,QAAQ,CAAC,CAAC,CACVC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACjB;EACA,OAAQX,kBAAkB,CAACQ,SAAS,CAAC,IAAIR,kBAAkB,CAACQ,SAAS,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC/B,IAAIC,GAAG,GAAG,CAAC,CAAC,EAAEhB,MAAM,CAACiB,OAAO;EAC5B;EACC,OAAOF,IAAI,KAAK,QAAQ,IAAIA,IAAI,IAAKA,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;EACzD,OAAOR,oBAAoB,CAACS,GAAG,CAAC;AACpC,CAAC;AACDlB,OAAO,CAACoB,OAAO,GAAG;EACdJ,YAAY,EAAEA,YAAY;EAC1BN,UAAU,EAAEA;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}