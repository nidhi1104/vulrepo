{"ast":null,"code":"'use strict';\n\nconst Token = require('token-types');\nconst strtok3 = require('strtok3/lib/core');\nconst {\n  stringToBytes,\n  tarHeaderChecksumMatches,\n  uint32SyncSafeToken\n} = require('./util');\nconst supported = require('./supported');\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range\n\nasync function fromStream(stream) {\n  const tokenizer = await strtok3.fromStream(stream);\n  try {\n    return await fromTokenizer(tokenizer);\n  } finally {\n    await tokenizer.close();\n  }\n}\nasync function fromBuffer(input) {\n  if (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n    throw new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n  }\n  const buffer = input instanceof Buffer ? input : Buffer.from(input);\n  if (!(buffer && buffer.length > 1)) {\n    return;\n  }\n  const tokenizer = strtok3.fromBuffer(buffer);\n  return fromTokenizer(tokenizer);\n}\nfunction _check(buffer, headers, options) {\n  options = {\n    offset: 0,\n    ...options\n  };\n  for (const [index, header] of headers.entries()) {\n    // If a bitmask is set\n    if (options.mask) {\n      // If header doesn't equal `buf` with bits masked off\n      if (header !== (options.mask[index] & buffer[index + options.offset])) {\n        return false;\n      }\n    } else if (header !== buffer[index + options.offset]) {\n      return false;\n    }\n  }\n  return true;\n}\nasync function fromTokenizer(tokenizer) {\n  try {\n    return _fromTokenizer(tokenizer);\n  } catch (error) {\n    if (!(error instanceof strtok3.EndOfStreamError)) {\n      throw error;\n    }\n  }\n}\nasync function _fromTokenizer(tokenizer) {\n  let buffer = Buffer.alloc(minimumBytes);\n  const bytesRead = 12;\n  const check = (header, options) => _check(buffer, header, options);\n  const checkString = (header, options) => check(stringToBytes(header), options);\n\n  // Keep reading until EOF if the file size is unknown.\n  if (!tokenizer.fileInfo.size) {\n    tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n  }\n  await tokenizer.peekBuffer(buffer, {\n    length: bytesRead,\n    mayBeLess: true\n  });\n\n  // -- 2-byte signatures --\n\n  if (check([0x42, 0x4D])) {\n    return {\n      ext: 'bmp',\n      mime: 'image/bmp'\n    };\n  }\n  if (check([0x0B, 0x77])) {\n    return {\n      ext: 'ac3',\n      mime: 'audio/vnd.dolby.dd-raw'\n    };\n  }\n  if (check([0x78, 0x01])) {\n    return {\n      ext: 'dmg',\n      mime: 'application/x-apple-diskimage'\n    };\n  }\n  if (check([0x4D, 0x5A])) {\n    return {\n      ext: 'exe',\n      mime: 'application/x-msdownload'\n    };\n  }\n  if (check([0x25, 0x21])) {\n    await tokenizer.peekBuffer(buffer, {\n      length: 24,\n      mayBeLess: true\n    });\n    if (checkString('PS-Adobe-', {\n      offset: 2\n    }) && checkString(' EPSF-', {\n      offset: 14\n    })) {\n      return {\n        ext: 'eps',\n        mime: 'application/eps'\n      };\n    }\n    return {\n      ext: 'ps',\n      mime: 'application/postscript'\n    };\n  }\n  if (check([0x1F, 0xA0]) || check([0x1F, 0x9D])) {\n    return {\n      ext: 'Z',\n      mime: 'application/x-compress'\n    };\n  }\n\n  // -- 3-byte signatures --\n\n  if (check([0xFF, 0xD8, 0xFF])) {\n    return {\n      ext: 'jpg',\n      mime: 'image/jpeg'\n    };\n  }\n  if (check([0x49, 0x49, 0xBC])) {\n    return {\n      ext: 'jxr',\n      mime: 'image/vnd.ms-photo'\n    };\n  }\n  if (check([0x1F, 0x8B, 0x8])) {\n    return {\n      ext: 'gz',\n      mime: 'application/gzip'\n    };\n  }\n  if (check([0x42, 0x5A, 0x68])) {\n    return {\n      ext: 'bz2',\n      mime: 'application/x-bzip2'\n    };\n  }\n  if (checkString('ID3')) {\n    await tokenizer.ignore(6); // Skip ID3 header until the header size\n    const id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);\n    if (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {\n      // Guess file type based on ID3 header for backward compatibility\n      return {\n        ext: 'mp3',\n        mime: 'audio/mpeg'\n      };\n    }\n    await tokenizer.ignore(id3HeaderLen);\n    return fromTokenizer(tokenizer); // Skip ID3 header, recursion\n  }\n\n  // Musepack, SV7\n  if (checkString('MP+')) {\n    return {\n      ext: 'mpc',\n      mime: 'audio/x-musepack'\n    };\n  }\n  if ((buffer[0] === 0x43 || buffer[0] === 0x46) && check([0x57, 0x53], {\n    offset: 1\n  })) {\n    return {\n      ext: 'swf',\n      mime: 'application/x-shockwave-flash'\n    };\n  }\n\n  // -- 4-byte signatures --\n\n  if (check([0x47, 0x49, 0x46])) {\n    return {\n      ext: 'gif',\n      mime: 'image/gif'\n    };\n  }\n  if (checkString('FLIF')) {\n    return {\n      ext: 'flif',\n      mime: 'image/flif'\n    };\n  }\n  if (checkString('8BPS')) {\n    return {\n      ext: 'psd',\n      mime: 'image/vnd.adobe.photoshop'\n    };\n  }\n  if (checkString('WEBP', {\n    offset: 8\n  })) {\n    return {\n      ext: 'webp',\n      mime: 'image/webp'\n    };\n  }\n\n  // Musepack, SV8\n  if (checkString('MPCK')) {\n    return {\n      ext: 'mpc',\n      mime: 'audio/x-musepack'\n    };\n  }\n  if (checkString('FORM')) {\n    return {\n      ext: 'aif',\n      mime: 'audio/aiff'\n    };\n  }\n  if (checkString('icns', {\n    offset: 0\n  })) {\n    return {\n      ext: 'icns',\n      mime: 'image/icns'\n    };\n  }\n\n  // Zip-based file formats\n  // Need to be before the `zip` check\n  if (check([0x50, 0x4B, 0x3, 0x4])) {\n    // Local file header signature\n    try {\n      while (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n        await tokenizer.readBuffer(buffer, {\n          length: 30\n        });\n\n        // https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n        const zipHeader = {\n          compressedSize: buffer.readUInt32LE(18),\n          uncompressedSize: buffer.readUInt32LE(22),\n          filenameLength: buffer.readUInt16LE(26),\n          extraFieldLength: buffer.readUInt16LE(28)\n        };\n        zipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n        await tokenizer.ignore(zipHeader.extraFieldLength);\n\n        // Assumes signed `.xpi` from addons.mozilla.org\n        if (zipHeader.filename === 'META-INF/mozilla.rsa') {\n          return {\n            ext: 'xpi',\n            mime: 'application/x-xpinstall'\n          };\n        }\n        if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n          const type = zipHeader.filename.split('/')[0];\n          switch (type) {\n            case '_rels':\n              break;\n            case 'word':\n              return {\n                ext: 'docx',\n                mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n              };\n            case 'ppt':\n              return {\n                ext: 'pptx',\n                mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n              };\n            case 'xl':\n              return {\n                ext: 'xlsx',\n                mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n              };\n            default:\n              break;\n          }\n        }\n        if (zipHeader.filename.startsWith('xl/')) {\n          return {\n            ext: 'xlsx',\n            mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          };\n        }\n        if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n          return {\n            ext: '3mf',\n            mime: 'model/3mf'\n          };\n        }\n\n        // The docx, xlsx and pptx file types extend the Office Open XML file format:\n        // https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n        // We look for:\n        // - one entry named '[Content_Types].xml' or '_rels/.rels',\n        // - one entry indicating specific type of file.\n        // MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n        if (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n          const mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n          switch (mimeType) {\n            case 'application/epub+zip':\n              return {\n                ext: 'epub',\n                mime: 'application/epub+zip'\n              };\n            case 'application/vnd.oasis.opendocument.text':\n              return {\n                ext: 'odt',\n                mime: 'application/vnd.oasis.opendocument.text'\n              };\n            case 'application/vnd.oasis.opendocument.spreadsheet':\n              return {\n                ext: 'ods',\n                mime: 'application/vnd.oasis.opendocument.spreadsheet'\n              };\n            case 'application/vnd.oasis.opendocument.presentation':\n              return {\n                ext: 'odp',\n                mime: 'application/vnd.oasis.opendocument.presentation'\n              };\n            default:\n          }\n        }\n\n        // Try to find next header manually when current one is corrupted\n        if (zipHeader.compressedSize === 0) {\n          let nextHeaderIndex = -1;\n          while (nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size) {\n            await tokenizer.peekBuffer(buffer, {\n              mayBeLess: true\n            });\n            nextHeaderIndex = buffer.indexOf('504B0304', 0, 'hex');\n            // Move position to the next header if found, skip the whole buffer otherwise\n            await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);\n          }\n        } else {\n          await tokenizer.ignore(zipHeader.compressedSize);\n        }\n      }\n    } catch (error) {\n      if (!(error instanceof strtok3.EndOfStreamError)) {\n        throw error;\n      }\n    }\n    return {\n      ext: 'zip',\n      mime: 'application/zip'\n    };\n  }\n  if (checkString('OggS')) {\n    // This is an OGG container\n    await tokenizer.ignore(28);\n    const type = Buffer.alloc(8);\n    await tokenizer.readBuffer(type);\n\n    // Needs to be before `ogg` check\n    if (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n      return {\n        ext: 'opus',\n        mime: 'audio/opus'\n      };\n    }\n\n    // If ' theora' in header.\n    if (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n      return {\n        ext: 'ogv',\n        mime: 'video/ogg'\n      };\n    }\n\n    // If '\\x01video' in header.\n    if (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n      return {\n        ext: 'ogm',\n        mime: 'video/ogg'\n      };\n    }\n\n    // If ' FLAC' in header  https://xiph.org/flac/faq.html\n    if (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n      return {\n        ext: 'oga',\n        mime: 'audio/ogg'\n      };\n    }\n\n    // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n    if (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n      return {\n        ext: 'spx',\n        mime: 'audio/ogg'\n      };\n    }\n\n    // If '\\x01vorbis' in header\n    if (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n      return {\n        ext: 'ogg',\n        mime: 'audio/ogg'\n      };\n    }\n\n    // Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n    return {\n      ext: 'ogx',\n      mime: 'application/ogg'\n    };\n  }\n  if (check([0x50, 0x4B]) && (buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) && (buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)) {\n    return {\n      ext: 'zip',\n      mime: 'application/zip'\n    };\n  }\n\n  //\n\n  // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n  // It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n  // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n  // Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n  if (checkString('ftyp', {\n    offset: 4\n  }) && (buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n  ) {\n    // They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n    // For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n    const brandMajor = buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n    switch (brandMajor) {\n      case 'avif':\n        return {\n          ext: 'avif',\n          mime: 'image/avif'\n        };\n      case 'mif1':\n        return {\n          ext: 'heic',\n          mime: 'image/heif'\n        };\n      case 'msf1':\n        return {\n          ext: 'heic',\n          mime: 'image/heif-sequence'\n        };\n      case 'heic':\n      case 'heix':\n        return {\n          ext: 'heic',\n          mime: 'image/heic'\n        };\n      case 'hevc':\n      case 'hevx':\n        return {\n          ext: 'heic',\n          mime: 'image/heic-sequence'\n        };\n      case 'qt':\n        return {\n          ext: 'mov',\n          mime: 'video/quicktime'\n        };\n      case 'M4V':\n      case 'M4VH':\n      case 'M4VP':\n        return {\n          ext: 'm4v',\n          mime: 'video/x-m4v'\n        };\n      case 'M4P':\n        return {\n          ext: 'm4p',\n          mime: 'video/mp4'\n        };\n      case 'M4B':\n        return {\n          ext: 'm4b',\n          mime: 'audio/mp4'\n        };\n      case 'M4A':\n        return {\n          ext: 'm4a',\n          mime: 'audio/x-m4a'\n        };\n      case 'F4V':\n        return {\n          ext: 'f4v',\n          mime: 'video/mp4'\n        };\n      case 'F4P':\n        return {\n          ext: 'f4p',\n          mime: 'video/mp4'\n        };\n      case 'F4A':\n        return {\n          ext: 'f4a',\n          mime: 'audio/mp4'\n        };\n      case 'F4B':\n        return {\n          ext: 'f4b',\n          mime: 'audio/mp4'\n        };\n      case 'crx':\n        return {\n          ext: 'cr3',\n          mime: 'image/x-canon-cr3'\n        };\n      default:\n        if (brandMajor.startsWith('3g')) {\n          if (brandMajor.startsWith('3g2')) {\n            return {\n              ext: '3g2',\n              mime: 'video/3gpp2'\n            };\n          }\n          return {\n            ext: '3gp',\n            mime: 'video/3gpp'\n          };\n        }\n        return {\n          ext: 'mp4',\n          mime: 'video/mp4'\n        };\n    }\n  }\n  if (checkString('MThd')) {\n    return {\n      ext: 'mid',\n      mime: 'audio/midi'\n    };\n  }\n  if (checkString('wOFF') && (check([0x00, 0x01, 0x00, 0x00], {\n    offset: 4\n  }) || checkString('OTTO', {\n    offset: 4\n  }))) {\n    return {\n      ext: 'woff',\n      mime: 'font/woff'\n    };\n  }\n  if (checkString('wOF2') && (check([0x00, 0x01, 0x00, 0x00], {\n    offset: 4\n  }) || checkString('OTTO', {\n    offset: 4\n  }))) {\n    return {\n      ext: 'woff2',\n      mime: 'font/woff2'\n    };\n  }\n  if (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {\n    return {\n      ext: 'pcap',\n      mime: 'application/vnd.tcpdump.pcap'\n    };\n  }\n\n  // Sony DSD Stream File (DSF)\n  if (checkString('DSD ')) {\n    return {\n      ext: 'dsf',\n      mime: 'audio/x-dsf' // Non-standard\n    };\n  }\n  if (checkString('LZIP')) {\n    return {\n      ext: 'lz',\n      mime: 'application/x-lzip'\n    };\n  }\n  if (checkString('fLaC')) {\n    return {\n      ext: 'flac',\n      mime: 'audio/x-flac'\n    };\n  }\n  if (check([0x42, 0x50, 0x47, 0xFB])) {\n    return {\n      ext: 'bpg',\n      mime: 'image/bpg'\n    };\n  }\n  if (checkString('wvpk')) {\n    return {\n      ext: 'wv',\n      mime: 'audio/wavpack'\n    };\n  }\n  if (checkString('%PDF')) {\n    await tokenizer.ignore(1350);\n    const maxBufferSize = 10 * 1024 * 1024;\n    const buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n    await tokenizer.readBuffer(buffer, {\n      mayBeLess: true\n    });\n\n    // Check if this is an Adobe Illustrator file\n    if (buffer.includes(Buffer.from('AIPrivateData'))) {\n      return {\n        ext: 'ai',\n        mime: 'application/postscript'\n      };\n    }\n\n    // Assume this is just a normal PDF\n    return {\n      ext: 'pdf',\n      mime: 'application/pdf'\n    };\n  }\n  if (check([0x00, 0x61, 0x73, 0x6D])) {\n    return {\n      ext: 'wasm',\n      mime: 'application/wasm'\n    };\n  }\n\n  // TIFF, little-endian type\n  if (check([0x49, 0x49, 0x2A, 0x0])) {\n    if (checkString('CR', {\n      offset: 8\n    })) {\n      return {\n        ext: 'cr2',\n        mime: 'image/x-canon-cr2'\n      };\n    }\n    if (check([0x1C, 0x00, 0xFE, 0x00], {\n      offset: 8\n    }) || check([0x1F, 0x00, 0x0B, 0x00], {\n      offset: 8\n    })) {\n      return {\n        ext: 'nef',\n        mime: 'image/x-nikon-nef'\n      };\n    }\n    if (check([0x08, 0x00, 0x00, 0x00], {\n      offset: 4\n    }) && (check([0x2D, 0x00, 0xFE, 0x00], {\n      offset: 8\n    }) || check([0x27, 0x00, 0xFE, 0x00], {\n      offset: 8\n    }))) {\n      return {\n        ext: 'dng',\n        mime: 'image/x-adobe-dng'\n      };\n    }\n    buffer = Buffer.alloc(24);\n    await tokenizer.peekBuffer(buffer);\n    if ((check([0x10, 0xFB, 0x86, 0x01], {\n      offset: 4\n    }) || check([0x08, 0x00, 0x00, 0x00], {\n      offset: 4\n    })) &&\n    // This pattern differentiates ARW from other TIFF-ish file types:\n    check([0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01], {\n      offset: 9\n    })) {\n      return {\n        ext: 'arw',\n        mime: 'image/x-sony-arw'\n      };\n    }\n    return {\n      ext: 'tif',\n      mime: 'image/tiff'\n    };\n  }\n\n  // TIFF, big-endian type\n  if (check([0x4D, 0x4D, 0x0, 0x2A])) {\n    return {\n      ext: 'tif',\n      mime: 'image/tiff'\n    };\n  }\n  if (checkString('MAC ')) {\n    return {\n      ext: 'ape',\n      mime: 'audio/ape'\n    };\n  }\n\n  // https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n  if (check([0x1A, 0x45, 0xDF, 0xA3])) {\n    // Root element: EBML\n    async function readField() {\n      const msb = await tokenizer.peekNumber(Token.UINT8);\n      let mask = 0x80;\n      let ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\n\n      while ((msb & mask) === 0 && mask !== 0) {\n        ++ic;\n        mask >>= 1;\n      }\n      const id = Buffer.alloc(ic + 1);\n      await tokenizer.readBuffer(id);\n      return id;\n    }\n    async function readElement() {\n      const id = await readField();\n      const lenField = await readField();\n      lenField[0] ^= 0x80 >> lenField.length - 1;\n      const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n      return {\n        id: id.readUIntBE(0, id.length),\n        len: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n      };\n    }\n    async function readChildren(level, children) {\n      while (children > 0) {\n        const e = await readElement();\n        if (e.id === 0x4282) {\n          return tokenizer.readToken(new Token.StringType(e.len, 'utf-8')); // Return DocType\n        }\n        await tokenizer.ignore(e.len); // ignore payload\n        --children;\n      }\n    }\n    const re = await readElement();\n    const docType = await readChildren(1, re.len);\n    switch (docType) {\n      case 'webm':\n        return {\n          ext: 'webm',\n          mime: 'video/webm'\n        };\n      case 'matroska':\n        return {\n          ext: 'mkv',\n          mime: 'video/x-matroska'\n        };\n      default:\n        return;\n    }\n  }\n\n  // RIFF file format which might be AVI, WAV, QCP, etc\n  if (check([0x52, 0x49, 0x46, 0x46])) {\n    if (check([0x41, 0x56, 0x49], {\n      offset: 8\n    })) {\n      return {\n        ext: 'avi',\n        mime: 'video/vnd.avi'\n      };\n    }\n    if (check([0x57, 0x41, 0x56, 0x45], {\n      offset: 8\n    })) {\n      return {\n        ext: 'wav',\n        mime: 'audio/vnd.wave'\n      };\n    }\n\n    // QLCM, QCP file\n    if (check([0x51, 0x4C, 0x43, 0x4D], {\n      offset: 8\n    })) {\n      return {\n        ext: 'qcp',\n        mime: 'audio/qcelp'\n      };\n    }\n  }\n  if (checkString('SQLi')) {\n    return {\n      ext: 'sqlite',\n      mime: 'application/x-sqlite3'\n    };\n  }\n  if (check([0x4E, 0x45, 0x53, 0x1A])) {\n    return {\n      ext: 'nes',\n      mime: 'application/x-nintendo-nes-rom'\n    };\n  }\n  if (checkString('Cr24')) {\n    return {\n      ext: 'crx',\n      mime: 'application/x-google-chrome-extension'\n    };\n  }\n  if (checkString('MSCF') || checkString('ISc(')) {\n    return {\n      ext: 'cab',\n      mime: 'application/vnd.ms-cab-compressed'\n    };\n  }\n  if (check([0xED, 0xAB, 0xEE, 0xDB])) {\n    return {\n      ext: 'rpm',\n      mime: 'application/x-rpm'\n    };\n  }\n  if (check([0xC5, 0xD0, 0xD3, 0xC6])) {\n    return {\n      ext: 'eps',\n      mime: 'application/eps'\n    };\n  }\n  if (check([0x28, 0xB5, 0x2F, 0xFD])) {\n    return {\n      ext: 'zst',\n      mime: 'application/zstd'\n    };\n  }\n\n  // -- 5-byte signatures --\n\n  if (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n    return {\n      ext: 'otf',\n      mime: 'font/otf'\n    };\n  }\n  if (checkString('#!AMR')) {\n    return {\n      ext: 'amr',\n      mime: 'audio/amr'\n    };\n  }\n  if (checkString('{\\\\rtf')) {\n    return {\n      ext: 'rtf',\n      mime: 'application/rtf'\n    };\n  }\n  if (check([0x46, 0x4C, 0x56, 0x01])) {\n    return {\n      ext: 'flv',\n      mime: 'video/x-flv'\n    };\n  }\n  if (checkString('IMPM')) {\n    return {\n      ext: 'it',\n      mime: 'audio/x-it'\n    };\n  }\n  if (checkString('-lh0-', {\n    offset: 2\n  }) || checkString('-lh1-', {\n    offset: 2\n  }) || checkString('-lh2-', {\n    offset: 2\n  }) || checkString('-lh3-', {\n    offset: 2\n  }) || checkString('-lh4-', {\n    offset: 2\n  }) || checkString('-lh5-', {\n    offset: 2\n  }) || checkString('-lh6-', {\n    offset: 2\n  }) || checkString('-lh7-', {\n    offset: 2\n  }) || checkString('-lzs-', {\n    offset: 2\n  }) || checkString('-lz4-', {\n    offset: 2\n  }) || checkString('-lz5-', {\n    offset: 2\n  }) || checkString('-lhd-', {\n    offset: 2\n  })) {\n    return {\n      ext: 'lzh',\n      mime: 'application/x-lzh-compressed'\n    };\n  }\n\n  // MPEG program stream (PS or MPEG-PS)\n  if (check([0x00, 0x00, 0x01, 0xBA])) {\n    //  MPEG-PS, MPEG-1 Part 1\n    if (check([0x21], {\n      offset: 4,\n      mask: [0xF1]\n    })) {\n      return {\n        ext: 'mpg',\n        // May also be .ps, .mpeg\n        mime: 'video/MP1S'\n      };\n    }\n\n    // MPEG-PS, MPEG-2 Part 1\n    if (check([0x44], {\n      offset: 4,\n      mask: [0xC4]\n    })) {\n      return {\n        ext: 'mpg',\n        // May also be .mpg, .m2p, .vob or .sub\n        mime: 'video/MP2P'\n      };\n    }\n  }\n  if (checkString('ITSF')) {\n    return {\n      ext: 'chm',\n      mime: 'application/vnd.ms-htmlhelp'\n    };\n  }\n\n  // -- 6-byte signatures --\n\n  if (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n    return {\n      ext: 'xz',\n      mime: 'application/x-xz'\n    };\n  }\n  if (checkString('<?xml ')) {\n    return {\n      ext: 'xml',\n      mime: 'application/xml'\n    };\n  }\n  if (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n    return {\n      ext: '7z',\n      mime: 'application/x-7z-compressed'\n    };\n  }\n  if (check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) && (buffer[6] === 0x0 || buffer[6] === 0x1)) {\n    return {\n      ext: 'rar',\n      mime: 'application/x-rar-compressed'\n    };\n  }\n  if (checkString('solid ')) {\n    return {\n      ext: 'stl',\n      mime: 'model/stl'\n    };\n  }\n\n  // -- 7-byte signatures --\n\n  if (checkString('BLENDER')) {\n    return {\n      ext: 'blend',\n      mime: 'application/x-blender'\n    };\n  }\n  if (checkString('!<arch>')) {\n    await tokenizer.ignore(8);\n    const str = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n    if (str === 'debian-binary') {\n      return {\n        ext: 'deb',\n        mime: 'application/x-deb'\n      };\n    }\n    return {\n      ext: 'ar',\n      mime: 'application/x-unix-archive'\n    };\n  }\n\n  // -- 8-byte signatures --\n\n  if (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n    // APNG format (https://wiki.mozilla.org/APNG_Specification)\n    // 1. Find the first IDAT (image data) chunk (49 44 41 54)\n    // 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n    // Offset calculated as follows:\n    // - 8 bytes: PNG signature\n    // - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n    await tokenizer.ignore(8); // ignore PNG signature\n\n    async function readChunkHeader() {\n      return {\n        length: await tokenizer.readToken(Token.INT32_BE),\n        type: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n      };\n    }\n    do {\n      const chunk = await readChunkHeader();\n      if (chunk.length < 0) {\n        return; // Invalid chunk length\n      }\n      switch (chunk.type) {\n        case 'IDAT':\n          return {\n            ext: 'png',\n            mime: 'image/png'\n          };\n        case 'acTL':\n          return {\n            ext: 'apng',\n            mime: 'image/apng'\n          };\n        default:\n          await tokenizer.ignore(chunk.length + 4);\n        // Ignore chunk-data + CRC\n      }\n    } while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n    return {\n      ext: 'png',\n      mime: 'image/png'\n    };\n  }\n  if (check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n    return {\n      ext: 'arrow',\n      mime: 'application/x-apache-arrow'\n    };\n  }\n  if (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n    return {\n      ext: 'glb',\n      mime: 'model/gltf-binary'\n    };\n  }\n\n  // `mov` format variants\n  if (check([0x66, 0x72, 0x65, 0x65], {\n    offset: 4\n  }) ||\n  // `free`\n  check([0x6D, 0x64, 0x61, 0x74], {\n    offset: 4\n  }) ||\n  // `mdat` MJPEG\n  check([0x6D, 0x6F, 0x6F, 0x76], {\n    offset: 4\n  }) ||\n  // `moov`\n  check([0x77, 0x69, 0x64, 0x65], {\n    offset: 4\n  }) // `wide`\n  ) {\n    return {\n      ext: 'mov',\n      mime: 'video/quicktime'\n    };\n  }\n\n  // -- 9-byte signatures --\n\n  if (check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n    return {\n      ext: 'orf',\n      mime: 'image/x-olympus-orf'\n    };\n  }\n  if (checkString('gimp xcf ')) {\n    return {\n      ext: 'xcf',\n      mime: 'image/x-xcf'\n    };\n  }\n\n  // -- 12-byte signatures --\n\n  if (check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n    return {\n      ext: 'rw2',\n      mime: 'image/x-panasonic-rw2'\n    };\n  }\n\n  // ASF_Header_Object first 80 bytes\n  if (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n    async function readHeader() {\n      const guid = Buffer.alloc(16);\n      await tokenizer.readBuffer(guid);\n      return {\n        id: guid,\n        size: Number(await tokenizer.readToken(Token.UINT64_LE))\n      };\n    }\n    await tokenizer.ignore(30);\n    // Search for header should be in first 1KB of file.\n    while (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n      const header = await readHeader();\n      let payload = header.size - 24;\n      if (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n        // Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n        const typeId = Buffer.alloc(16);\n        payload -= await tokenizer.readBuffer(typeId);\n        if (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n          // Found audio:\n          return {\n            ext: 'asf',\n            mime: 'audio/x-ms-asf'\n          };\n        }\n        if (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n          // Found video:\n          return {\n            ext: 'asf',\n            mime: 'video/x-ms-asf'\n          };\n        }\n        break;\n      }\n      await tokenizer.ignore(payload);\n    }\n\n    // Default to ASF generic extension\n    return {\n      ext: 'asf',\n      mime: 'application/vnd.ms-asf'\n    };\n  }\n  if (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n    return {\n      ext: 'ktx',\n      mime: 'image/ktx'\n    };\n  }\n  if ((check([0x7E, 0x10, 0x04]) || check([0x7E, 0x18, 0x04])) && check([0x30, 0x4D, 0x49, 0x45], {\n    offset: 4\n  })) {\n    return {\n      ext: 'mie',\n      mime: 'application/x-mie'\n    };\n  }\n  if (check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {\n    offset: 2\n  })) {\n    return {\n      ext: 'shp',\n      mime: 'application/x-esri-shape'\n    };\n  }\n  if (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n    // JPEG-2000 family\n\n    await tokenizer.ignore(20);\n    const type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n    switch (type) {\n      case 'jp2 ':\n        return {\n          ext: 'jp2',\n          mime: 'image/jp2'\n        };\n      case 'jpx ':\n        return {\n          ext: 'jpx',\n          mime: 'image/jpx'\n        };\n      case 'jpm ':\n        return {\n          ext: 'jpm',\n          mime: 'image/jpm'\n        };\n      case 'mjp2':\n        return {\n          ext: 'mj2',\n          mime: 'image/mj2'\n        };\n      default:\n        return;\n    }\n  }\n  if (check([0xFF, 0x0A]) || check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n    return {\n      ext: 'jxl',\n      mime: 'image/jxl'\n    };\n  }\n\n  // -- Unsafe signatures --\n\n  if (check([0x0, 0x0, 0x1, 0xBA]) || check([0x0, 0x0, 0x1, 0xB3])) {\n    return {\n      ext: 'mpg',\n      mime: 'video/mpeg'\n    };\n  }\n  if (check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n    return {\n      ext: 'ttf',\n      mime: 'font/ttf'\n    };\n  }\n  if (check([0x00, 0x00, 0x01, 0x00])) {\n    return {\n      ext: 'ico',\n      mime: 'image/x-icon'\n    };\n  }\n  if (check([0x00, 0x00, 0x02, 0x00])) {\n    return {\n      ext: 'cur',\n      mime: 'image/x-icon'\n    };\n  }\n  if (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n    // Detected Microsoft Compound File Binary File (MS-CFB) Format.\n    return {\n      ext: 'cfb',\n      mime: 'application/x-cfb'\n    };\n  }\n\n  // Increase sample size from 12 to 256.\n  await tokenizer.peekBuffer(buffer, {\n    length: Math.min(256, tokenizer.fileInfo.size),\n    mayBeLess: true\n  });\n\n  // -- 15-byte signatures --\n\n  if (checkString('BEGIN:')) {\n    if (checkString('VCARD', {\n      offset: 6\n    })) {\n      return {\n        ext: 'vcf',\n        mime: 'text/vcard'\n      };\n    }\n    if (checkString('VCALENDAR', {\n      offset: 6\n    })) {\n      return {\n        ext: 'ics',\n        mime: 'text/calendar'\n      };\n    }\n  }\n\n  // `raf` is here just to keep all the raw image detectors together.\n  if (checkString('FUJIFILMCCD-RAW')) {\n    return {\n      ext: 'raf',\n      mime: 'image/x-fujifilm-raf'\n    };\n  }\n  if (checkString('Extended Module:')) {\n    return {\n      ext: 'xm',\n      mime: 'audio/x-xm'\n    };\n  }\n  if (checkString('Creative Voice File')) {\n    return {\n      ext: 'voc',\n      mime: 'audio/x-voc'\n    };\n  }\n  if (check([0x04, 0x00, 0x00, 0x00]) && buffer.length >= 16) {\n    // Rough & quick check Pickle/ASAR\n    const jsonSize = buffer.readUInt32LE(12);\n    if (jsonSize > 12 && buffer.length >= jsonSize + 16) {\n      try {\n        const header = buffer.slice(16, jsonSize + 16).toString();\n        const json = JSON.parse(header);\n        // Check if Pickle is ASAR\n        if (json.files) {\n          // Final check, assuring Pickle/ASAR format\n          return {\n            ext: 'asar',\n            mime: 'application/x-asar'\n          };\n        }\n      } catch (_) {}\n    }\n  }\n  if (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n    return {\n      ext: 'mxf',\n      mime: 'application/mxf'\n    };\n  }\n  if (checkString('SCRM', {\n    offset: 44\n  })) {\n    return {\n      ext: 's3m',\n      mime: 'audio/x-s3m'\n    };\n  }\n  if (check([0x47], {\n    offset: 4\n  }) && (check([0x47], {\n    offset: 192\n  }) || check([0x47], {\n    offset: 196\n  }))) {\n    return {\n      ext: 'mts',\n      mime: 'video/mp2t'\n    };\n  }\n  if (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {\n    offset: 60\n  })) {\n    return {\n      ext: 'mobi',\n      mime: 'application/x-mobipocket-ebook'\n    };\n  }\n  if (check([0x44, 0x49, 0x43, 0x4D], {\n    offset: 128\n  })) {\n    return {\n      ext: 'dcm',\n      mime: 'application/dicom'\n    };\n  }\n  if (check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n    return {\n      ext: 'lnk',\n      mime: 'application/x.ms.shortcut' // Invented by us\n    };\n  }\n  if (check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n    return {\n      ext: 'alias',\n      mime: 'application/x.apple.alias' // Invented by us\n    };\n  }\n  if (check([0x4C, 0x50], {\n    offset: 34\n  }) && (check([0x00, 0x00, 0x01], {\n    offset: 8\n  }) || check([0x01, 0x00, 0x02], {\n    offset: 8\n  }) || check([0x02, 0x00, 0x02], {\n    offset: 8\n  }))) {\n    return {\n      ext: 'eot',\n      mime: 'application/vnd.ms-fontobject'\n    };\n  }\n  if (check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n    return {\n      ext: 'indd',\n      mime: 'application/x-indesign'\n    };\n  }\n\n  // Increase sample size from 256 to 512\n  await tokenizer.peekBuffer(buffer, {\n    length: Math.min(512, tokenizer.fileInfo.size),\n    mayBeLess: true\n  });\n\n  // Requires a buffer size of 512 bytes\n  if (tarHeaderChecksumMatches(buffer)) {\n    return {\n      ext: 'tar',\n      mime: 'application/x-tar'\n    };\n  }\n  if (check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n    return {\n      ext: 'skp',\n      mime: 'application/vnd.sketchup.skp'\n    };\n  }\n  if (checkString('-----BEGIN PGP MESSAGE-----')) {\n    return {\n      ext: 'pgp',\n      mime: 'application/pgp-encrypted'\n    };\n  }\n\n  // Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n  if (buffer.length >= 2 && check([0xFF, 0xE0], {\n    offset: 0,\n    mask: [0xFF, 0xE0]\n  })) {\n    if (check([0x10], {\n      offset: 1,\n      mask: [0x16]\n    })) {\n      // Check for (ADTS) MPEG-2\n      if (check([0x08], {\n        offset: 1,\n        mask: [0x08]\n      })) {\n        return {\n          ext: 'aac',\n          mime: 'audio/aac'\n        };\n      }\n\n      // Must be (ADTS) MPEG-4\n      return {\n        ext: 'aac',\n        mime: 'audio/aac'\n      };\n    }\n\n    // MPEG 1 or 2 Layer 3 header\n    // Check for MPEG layer 3\n    if (check([0x02], {\n      offset: 1,\n      mask: [0x06]\n    })) {\n      return {\n        ext: 'mp3',\n        mime: 'audio/mpeg'\n      };\n    }\n\n    // Check for MPEG layer 2\n    if (check([0x04], {\n      offset: 1,\n      mask: [0x06]\n    })) {\n      return {\n        ext: 'mp2',\n        mime: 'audio/mpeg'\n      };\n    }\n\n    // Check for MPEG layer 1\n    if (check([0x06], {\n      offset: 1,\n      mask: [0x06]\n    })) {\n      return {\n        ext: 'mp1',\n        mime: 'audio/mpeg'\n      };\n    }\n  }\n}\nconst stream = readableStream => new Promise((resolve, reject) => {\n  // Using `eval` to work around issues when bundling with Webpack\n  const stream = eval('require')('stream'); // eslint-disable-line no-eval\n\n  readableStream.on('error', reject);\n  readableStream.once('readable', async () => {\n    // Set up output stream\n    const pass = new stream.PassThrough();\n    let outputStream;\n    if (stream.pipeline) {\n      outputStream = stream.pipeline(readableStream, pass, () => {});\n    } else {\n      outputStream = readableStream.pipe(pass);\n    }\n\n    // Read the input stream and detect the filetype\n    const chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);\n    try {\n      const fileType = await fromBuffer(chunk);\n      pass.fileType = fileType;\n    } catch (error) {\n      reject(error);\n    }\n    resolve(outputStream);\n  });\n});\nconst fileType = {\n  fromStream,\n  fromTokenizer,\n  fromBuffer,\n  stream\n};\nObject.defineProperty(fileType, 'extensions', {\n  get() {\n    return new Set(supported.extensions);\n  }\n});\nObject.defineProperty(fileType, 'mimeTypes', {\n  get() {\n    return new Set(supported.mimeTypes);\n  }\n});\nmodule.exports = fileType;","map":{"version":3,"names":["Token","require","strtok3","stringToBytes","tarHeaderChecksumMatches","uint32SyncSafeToken","supported","minimumBytes","fromStream","stream","tokenizer","fromTokenizer","close","fromBuffer","input","Uint8Array","ArrayBuffer","Buffer","isBuffer","TypeError","buffer","from","length","_check","headers","options","offset","index","header","entries","mask","_fromTokenizer","error","EndOfStreamError","alloc","bytesRead","check","checkString","fileInfo","size","Number","MAX_SAFE_INTEGER","peekBuffer","mayBeLess","ext","mime","ignore","id3HeaderLen","readToken","position","readBuffer","zipHeader","compressedSize","readUInt32LE","uncompressedSize","filenameLength","readUInt16LE","extraFieldLength","filename","StringType","endsWith","type","split","startsWith","mimeType","nextHeaderIndex","indexOf","brandMajor","toString","replace","trim","maxBufferSize","Math","min","includes","readField","msb","peekNumber","UINT8","ic","id","readElement","lenField","nrLen","readUIntBE","len","readChildren","level","children","e","re","docType","str","readChunkHeader","INT32_BE","chunk","readHeader","guid","UINT64_LE","payload","typeId","jsonSize","slice","json","JSON","parse","files","_","readableStream","Promise","resolve","reject","eval","on","once","pass","PassThrough","outputStream","pipeline","pipe","read","fileType","Object","defineProperty","get","Set","extensions","mimeTypes","module","exports"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/file-type/core.js"],"sourcesContent":["'use strict';\nconst Token = require('token-types');\nconst strtok3 = require('strtok3/lib/core');\nconst {\n\tstringToBytes,\n\ttarHeaderChecksumMatches,\n\tuint32SyncSafeToken\n} = require('./util');\nconst supported = require('./supported');\n\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range\n\nasync function fromStream(stream) {\n\tconst tokenizer = await strtok3.fromStream(stream);\n\ttry {\n\t\treturn await fromTokenizer(tokenizer);\n\t} finally {\n\t\tawait tokenizer.close();\n\t}\n}\n\nasync function fromBuffer(input) {\n\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst buffer = input instanceof Buffer ? input : Buffer.from(input);\n\n\tif (!(buffer && buffer.length > 1)) {\n\t\treturn;\n\t}\n\n\tconst tokenizer = strtok3.fromBuffer(buffer);\n\treturn fromTokenizer(tokenizer);\n}\n\nfunction _check(buffer, headers, options) {\n\toptions = {\n\t\toffset: 0,\n\t\t...options\n\t};\n\n\tfor (const [index, header] of headers.entries()) {\n\t\t// If a bitmask is set\n\t\tif (options.mask) {\n\t\t\t// If header doesn't equal `buf` with bits masked off\n\t\t\tif (header !== (options.mask[index] & buffer[index + options.offset])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (header !== buffer[index + options.offset]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nasync function fromTokenizer(tokenizer) {\n\ttry {\n\t\treturn _fromTokenizer(tokenizer);\n\t} catch (error) {\n\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nasync function _fromTokenizer(tokenizer) {\n\tlet buffer = Buffer.alloc(minimumBytes);\n\tconst bytesRead = 12;\n\tconst check = (header, options) => _check(buffer, header, options);\n\tconst checkString = (header, options) => check(stringToBytes(header), options);\n\n\t// Keep reading until EOF if the file size is unknown.\n\tif (!tokenizer.fileInfo.size) {\n\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n\t}\n\n\tawait tokenizer.peekBuffer(buffer, {length: bytesRead, mayBeLess: true});\n\n\t// -- 2-byte signatures --\n\n\tif (check([0x42, 0x4D])) {\n\t\treturn {\n\t\t\text: 'bmp',\n\t\t\tmime: 'image/bmp'\n\t\t};\n\t}\n\n\tif (check([0x0B, 0x77])) {\n\t\treturn {\n\t\t\text: 'ac3',\n\t\t\tmime: 'audio/vnd.dolby.dd-raw'\n\t\t};\n\t}\n\n\tif (check([0x78, 0x01])) {\n\t\treturn {\n\t\t\text: 'dmg',\n\t\t\tmime: 'application/x-apple-diskimage'\n\t\t};\n\t}\n\n\tif (check([0x4D, 0x5A])) {\n\t\treturn {\n\t\t\text: 'exe',\n\t\t\tmime: 'application/x-msdownload'\n\t\t};\n\t}\n\n\tif (check([0x25, 0x21])) {\n\t\tawait tokenizer.peekBuffer(buffer, {length: 24, mayBeLess: true});\n\n\t\tif (checkString('PS-Adobe-', {offset: 2}) &&\n\t\t\tcheckString(' EPSF-', {offset: 14})) {\n\t\t\treturn {\n\t\t\t\text: 'eps',\n\t\t\t\tmime: 'application/eps'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ps',\n\t\t\tmime: 'application/postscript'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x1F, 0xA0]) ||\n\t\tcheck([0x1F, 0x9D])\n\t) {\n\t\treturn {\n\t\t\text: 'Z',\n\t\t\tmime: 'application/x-compress'\n\t\t};\n\t}\n\n\t// -- 3-byte signatures --\n\n\tif (check([0xFF, 0xD8, 0xFF])) {\n\t\treturn {\n\t\t\text: 'jpg',\n\t\t\tmime: 'image/jpeg'\n\t\t};\n\t}\n\n\tif (check([0x49, 0x49, 0xBC])) {\n\t\treturn {\n\t\t\text: 'jxr',\n\t\t\tmime: 'image/vnd.ms-photo'\n\t\t};\n\t}\n\n\tif (check([0x1F, 0x8B, 0x8])) {\n\t\treturn {\n\t\t\text: 'gz',\n\t\t\tmime: 'application/gzip'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x5A, 0x68])) {\n\t\treturn {\n\t\t\text: 'bz2',\n\t\t\tmime: 'application/x-bzip2'\n\t\t};\n\t}\n\n\tif (checkString('ID3')) {\n\t\tawait tokenizer.ignore(6); // Skip ID3 header until the header size\n\t\tconst id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);\n\t\tif (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {\n\t\t\t// Guess file type based on ID3 header for backward compatibility\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(id3HeaderLen);\n\t\treturn fromTokenizer(tokenizer); // Skip ID3 header, recursion\n\t}\n\n\t// Musepack, SV7\n\tif (checkString('MP+')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (\n\t\t(buffer[0] === 0x43 || buffer[0] === 0x46) &&\n\t\tcheck([0x57, 0x53], {offset: 1})\n\t) {\n\t\treturn {\n\t\t\text: 'swf',\n\t\t\tmime: 'application/x-shockwave-flash'\n\t\t};\n\t}\n\n\t// -- 4-byte signatures --\n\n\tif (check([0x47, 0x49, 0x46])) {\n\t\treturn {\n\t\t\text: 'gif',\n\t\t\tmime: 'image/gif'\n\t\t};\n\t}\n\n\tif (checkString('FLIF')) {\n\t\treturn {\n\t\t\text: 'flif',\n\t\t\tmime: 'image/flif'\n\t\t};\n\t}\n\n\tif (checkString('8BPS')) {\n\t\treturn {\n\t\t\text: 'psd',\n\t\t\tmime: 'image/vnd.adobe.photoshop'\n\t\t};\n\t}\n\n\tif (checkString('WEBP', {offset: 8})) {\n\t\treturn {\n\t\t\text: 'webp',\n\t\t\tmime: 'image/webp'\n\t\t};\n\t}\n\n\t// Musepack, SV8\n\tif (checkString('MPCK')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (checkString('FORM')) {\n\t\treturn {\n\t\t\text: 'aif',\n\t\t\tmime: 'audio/aiff'\n\t\t};\n\t}\n\n\tif (checkString('icns', {offset: 0})) {\n\t\treturn {\n\t\t\text: 'icns',\n\t\t\tmime: 'image/icns'\n\t\t};\n\t}\n\n\t// Zip-based file formats\n\t// Need to be before the `zip` check\n\tif (check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature\n\t\ttry {\n\t\t\twhile (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n\t\t\t\tawait tokenizer.readBuffer(buffer, {length: 30});\n\n\t\t\t\t// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\t\t\t\tconst zipHeader = {\n\t\t\t\t\tcompressedSize: buffer.readUInt32LE(18),\n\t\t\t\t\tuncompressedSize: buffer.readUInt32LE(22),\n\t\t\t\t\tfilenameLength: buffer.readUInt16LE(26),\n\t\t\t\t\textraFieldLength: buffer.readUInt16LE(28)\n\t\t\t\t};\n\n\t\t\t\tzipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n\t\t\t\tawait tokenizer.ignore(zipHeader.extraFieldLength);\n\n\t\t\t\t// Assumes signed `.xpi` from addons.mozilla.org\n\t\t\t\tif (zipHeader.filename === 'META-INF/mozilla.rsa') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xpi',\n\t\t\t\t\t\tmime: 'application/x-xpinstall'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n\t\t\t\t\tconst type = zipHeader.filename.split('/')[0];\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase '_rels':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'word':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'docx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'ppt':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'pptx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'xl':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('xl/')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: '3mf',\n\t\t\t\t\t\tmime: 'model/3mf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\n\t\t\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n\t\t\t\t// We look for:\n\t\t\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\n\t\t\t\t// - one entry indicating specific type of file.\n\t\t\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\t\t\t\tif (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n\t\t\t\t\tconst mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\n\t\t\t\t\tswitch (mimeType) {\n\t\t\t\t\t\tcase 'application/epub+zip':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'epub',\n\t\t\t\t\t\t\t\tmime: 'application/epub+zip'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.text':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odt',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.text'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.spreadsheet':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'ods',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.presentation':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odp',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Try to find next header manually when current one is corrupted\n\t\t\t\tif (zipHeader.compressedSize === 0) {\n\t\t\t\t\tlet nextHeaderIndex = -1;\n\n\t\t\t\t\twhile (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {\n\t\t\t\t\t\tawait tokenizer.peekBuffer(buffer, {mayBeLess: true});\n\n\t\t\t\t\t\tnextHeaderIndex = buffer.indexOf('504B0304', 0, 'hex');\n\t\t\t\t\t\t// Move position to the next header if found, skip the whole buffer otherwise\n\t\t\t\t\t\tawait tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tawait tokenizer.ignore(zipHeader.compressedSize);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\tif (checkString('OggS')) {\n\t\t// This is an OGG container\n\t\tawait tokenizer.ignore(28);\n\t\tconst type = Buffer.alloc(8);\n\t\tawait tokenizer.readBuffer(type);\n\n\t\t// Needs to be before `ogg` check\n\t\tif (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n\t\t\treturn {\n\t\t\t\text: 'opus',\n\t\t\t\tmime: 'audio/opus'\n\t\t\t};\n\t\t}\n\n\t\t// If ' theora' in header.\n\t\tif (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n\t\t\treturn {\n\t\t\t\text: 'ogv',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01video' in header.\n\t\tif (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ogm',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\n\t\tif (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n\t\t\treturn {\n\t\t\t\text: 'oga',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\t\tif (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n\t\t\treturn {\n\t\t\t\text: 'spx',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01vorbis' in header\n\t\tif (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n\t\t\treturn {\n\t\t\t\text: 'ogg',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\t\treturn {\n\t\t\text: 'ogx',\n\t\t\tmime: 'application/ogg'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x50, 0x4B]) &&\n\t\t(buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) &&\n\t\t(buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)\n\t) {\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\t//\n\n\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n\t// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n\t// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n\t// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\tif (\n\t\tcheckString('ftyp', {offset: 4}) &&\n\t\t(buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n\t) {\n\t\t// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n\t\t// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n\t\tconst brandMajor = buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\t\tswitch (brandMajor) {\n\t\t\tcase 'avif':\n\t\t\t\treturn {ext: 'avif', mime: 'image/avif'};\n\t\t\tcase 'mif1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif'};\n\t\t\tcase 'msf1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif-sequence'};\n\t\t\tcase 'heic':\n\t\t\tcase 'heix':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic'};\n\t\t\tcase 'hevc':\n\t\t\tcase 'hevx':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic-sequence'};\n\t\t\tcase 'qt':\n\t\t\t\treturn {ext: 'mov', mime: 'video/quicktime'};\n\t\t\tcase 'M4V':\n\t\t\tcase 'M4VH':\n\t\t\tcase 'M4VP':\n\t\t\t\treturn {ext: 'm4v', mime: 'video/x-m4v'};\n\t\t\tcase 'M4P':\n\t\t\t\treturn {ext: 'm4p', mime: 'video/mp4'};\n\t\t\tcase 'M4B':\n\t\t\t\treturn {ext: 'm4b', mime: 'audio/mp4'};\n\t\t\tcase 'M4A':\n\t\t\t\treturn {ext: 'm4a', mime: 'audio/x-m4a'};\n\t\t\tcase 'F4V':\n\t\t\t\treturn {ext: 'f4v', mime: 'video/mp4'};\n\t\t\tcase 'F4P':\n\t\t\t\treturn {ext: 'f4p', mime: 'video/mp4'};\n\t\t\tcase 'F4A':\n\t\t\t\treturn {ext: 'f4a', mime: 'audio/mp4'};\n\t\t\tcase 'F4B':\n\t\t\t\treturn {ext: 'f4b', mime: 'audio/mp4'};\n\t\t\tcase 'crx':\n\t\t\t\treturn {ext: 'cr3', mime: 'image/x-canon-cr3'};\n\t\t\tdefault:\n\t\t\t\tif (brandMajor.startsWith('3g')) {\n\t\t\t\t\tif (brandMajor.startsWith('3g2')) {\n\t\t\t\t\t\treturn {ext: '3g2', mime: 'video/3gpp2'};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {ext: '3gp', mime: 'video/3gpp'};\n\t\t\t\t}\n\n\t\t\t\treturn {ext: 'mp4', mime: 'video/mp4'};\n\t\t}\n\t}\n\n\tif (checkString('MThd')) {\n\t\treturn {\n\t\t\text: 'mid',\n\t\t\tmime: 'audio/midi'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOFF') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff',\n\t\t\tmime: 'font/woff'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOF2') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff2',\n\t\t\tmime: 'font/woff2'\n\t\t};\n\t}\n\n\tif (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {\n\t\treturn {\n\t\t\text: 'pcap',\n\t\t\tmime: 'application/vnd.tcpdump.pcap'\n\t\t};\n\t}\n\n\t// Sony DSD Stream File (DSF)\n\tif (checkString('DSD ')) {\n\t\treturn {\n\t\t\text: 'dsf',\n\t\t\tmime: 'audio/x-dsf' // Non-standard\n\t\t};\n\t}\n\n\tif (checkString('LZIP')) {\n\t\treturn {\n\t\t\text: 'lz',\n\t\t\tmime: 'application/x-lzip'\n\t\t};\n\t}\n\n\tif (checkString('fLaC')) {\n\t\treturn {\n\t\t\text: 'flac',\n\t\t\tmime: 'audio/x-flac'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x50, 0x47, 0xFB])) {\n\t\treturn {\n\t\t\text: 'bpg',\n\t\t\tmime: 'image/bpg'\n\t\t};\n\t}\n\n\tif (checkString('wvpk')) {\n\t\treturn {\n\t\t\text: 'wv',\n\t\t\tmime: 'audio/wavpack'\n\t\t};\n\t}\n\n\tif (checkString('%PDF')) {\n\t\tawait tokenizer.ignore(1350);\n\t\tconst maxBufferSize = 10 * 1024 * 1024;\n\t\tconst buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n\t\tawait tokenizer.readBuffer(buffer, {mayBeLess: true});\n\n\t\t// Check if this is an Adobe Illustrator file\n\t\tif (buffer.includes(Buffer.from('AIPrivateData'))) {\n\t\t\treturn {\n\t\t\t\text: 'ai',\n\t\t\t\tmime: 'application/postscript'\n\t\t\t};\n\t\t}\n\n\t\t// Assume this is just a normal PDF\n\t\treturn {\n\t\t\text: 'pdf',\n\t\t\tmime: 'application/pdf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x61, 0x73, 0x6D])) {\n\t\treturn {\n\t\t\text: 'wasm',\n\t\t\tmime: 'application/wasm'\n\t\t};\n\t}\n\n\t// TIFF, little-endian type\n\tif (check([0x49, 0x49, 0x2A, 0x0])) {\n\t\tif (checkString('CR', {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'cr2',\n\t\t\t\tmime: 'image/x-canon-cr2'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || check([0x1F, 0x00, 0x0B, 0x00], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'nef',\n\t\t\t\tmime: 'image/x-nikon-nef'\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcheck([0x08, 0x00, 0x00, 0x00], {offset: 4}) &&\n\t\t\t(check([0x2D, 0x00, 0xFE, 0x00], {offset: 8}) ||\n\t\t\t\tcheck([0x27, 0x00, 0xFE, 0x00], {offset: 8}))\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'dng',\n\t\t\t\tmime: 'image/x-adobe-dng'\n\t\t\t};\n\t\t}\n\n\t\tbuffer = Buffer.alloc(24);\n\t\tawait tokenizer.peekBuffer(buffer);\n\t\tif (\n\t\t\t(check([0x10, 0xFB, 0x86, 0x01], {offset: 4}) || check([0x08, 0x00, 0x00, 0x00], {offset: 4})) &&\n\t\t\t// This pattern differentiates ARW from other TIFF-ish file types:\n\t\t\tcheck([0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01], {offset: 9})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'arw',\n\t\t\t\tmime: 'image/x-sony-arw'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\t// TIFF, big-endian type\n\tif (check([0x4D, 0x4D, 0x0, 0x2A])) {\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\tif (checkString('MAC ')) {\n\t\treturn {\n\t\t\text: 'ape',\n\t\t\tmime: 'audio/ape'\n\t\t};\n\t}\n\n\t// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\tif (check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML\n\t\tasync function readField() {\n\t\t\tconst msb = await tokenizer.peekNumber(Token.UINT8);\n\t\t\tlet mask = 0x80;\n\t\t\tlet ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\n\n\t\t\twhile ((msb & mask) === 0 && mask !== 0) {\n\t\t\t\t++ic;\n\t\t\t\tmask >>= 1;\n\t\t\t}\n\n\t\t\tconst id = Buffer.alloc(ic + 1);\n\t\t\tawait tokenizer.readBuffer(id);\n\t\t\treturn id;\n\t\t}\n\n\t\tasync function readElement() {\n\t\t\tconst id = await readField();\n\t\t\tconst lenField = await readField();\n\t\t\tlenField[0] ^= 0x80 >> (lenField.length - 1);\n\t\t\tconst nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n\t\t\treturn {\n\t\t\t\tid: id.readUIntBE(0, id.length),\n\t\t\t\tlen: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n\t\t\t};\n\t\t}\n\n\t\tasync function readChildren(level, children) {\n\t\t\twhile (children > 0) {\n\t\t\t\tconst e = await readElement();\n\t\t\t\tif (e.id === 0x4282) {\n\t\t\t\t\treturn tokenizer.readToken(new Token.StringType(e.len, 'utf-8')); // Return DocType\n\t\t\t\t}\n\n\t\t\t\tawait tokenizer.ignore(e.len); // ignore payload\n\t\t\t\t--children;\n\t\t\t}\n\t\t}\n\n\t\tconst re = await readElement();\n\t\tconst docType = await readChildren(1, re.len);\n\n\t\tswitch (docType) {\n\t\t\tcase 'webm':\n\t\t\t\treturn {\n\t\t\t\t\text: 'webm',\n\t\t\t\t\tmime: 'video/webm'\n\t\t\t\t};\n\n\t\t\tcase 'matroska':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mkv',\n\t\t\t\t\tmime: 'video/x-matroska'\n\t\t\t\t};\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t// RIFF file format which might be AVI, WAV, QCP, etc\n\tif (check([0x52, 0x49, 0x46, 0x46])) {\n\t\tif (check([0x41, 0x56, 0x49], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'avi',\n\t\t\t\tmime: 'video/vnd.avi'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'wav',\n\t\t\t\tmime: 'audio/vnd.wave'\n\t\t\t};\n\t\t}\n\n\t\t// QLCM, QCP file\n\t\tif (check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'qcp',\n\t\t\t\tmime: 'audio/qcelp'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('SQLi')) {\n\t\treturn {\n\t\t\text: 'sqlite',\n\t\t\tmime: 'application/x-sqlite3'\n\t\t};\n\t}\n\n\tif (check([0x4E, 0x45, 0x53, 0x1A])) {\n\t\treturn {\n\t\t\text: 'nes',\n\t\t\tmime: 'application/x-nintendo-nes-rom'\n\t\t};\n\t}\n\n\tif (checkString('Cr24')) {\n\t\treturn {\n\t\t\text: 'crx',\n\t\t\tmime: 'application/x-google-chrome-extension'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('MSCF') ||\n\t\tcheckString('ISc(')\n\t) {\n\t\treturn {\n\t\t\text: 'cab',\n\t\t\tmime: 'application/vnd.ms-cab-compressed'\n\t\t};\n\t}\n\n\tif (check([0xED, 0xAB, 0xEE, 0xDB])) {\n\t\treturn {\n\t\t\text: 'rpm',\n\t\t\tmime: 'application/x-rpm'\n\t\t};\n\t}\n\n\tif (check([0xC5, 0xD0, 0xD3, 0xC6])) {\n\t\treturn {\n\t\t\text: 'eps',\n\t\t\tmime: 'application/eps'\n\t\t};\n\t}\n\n\tif (check([0x28, 0xB5, 0x2F, 0xFD])) {\n\t\treturn {\n\t\t\text: 'zst',\n\t\t\tmime: 'application/zstd'\n\t\t};\n\t}\n\n\t// -- 5-byte signatures --\n\n\tif (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n\t\treturn {\n\t\t\text: 'otf',\n\t\t\tmime: 'font/otf'\n\t\t};\n\t}\n\n\tif (checkString('#!AMR')) {\n\t\treturn {\n\t\t\text: 'amr',\n\t\t\tmime: 'audio/amr'\n\t\t};\n\t}\n\n\tif (checkString('{\\\\rtf')) {\n\t\treturn {\n\t\t\text: 'rtf',\n\t\t\tmime: 'application/rtf'\n\t\t};\n\t}\n\n\tif (check([0x46, 0x4C, 0x56, 0x01])) {\n\t\treturn {\n\t\t\text: 'flv',\n\t\t\tmime: 'video/x-flv'\n\t\t};\n\t}\n\n\tif (checkString('IMPM')) {\n\t\treturn {\n\t\t\text: 'it',\n\t\t\tmime: 'audio/x-it'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('-lh0-', {offset: 2}) ||\n\t\tcheckString('-lh1-', {offset: 2}) ||\n\t\tcheckString('-lh2-', {offset: 2}) ||\n\t\tcheckString('-lh3-', {offset: 2}) ||\n\t\tcheckString('-lh4-', {offset: 2}) ||\n\t\tcheckString('-lh5-', {offset: 2}) ||\n\t\tcheckString('-lh6-', {offset: 2}) ||\n\t\tcheckString('-lh7-', {offset: 2}) ||\n\t\tcheckString('-lzs-', {offset: 2}) ||\n\t\tcheckString('-lz4-', {offset: 2}) ||\n\t\tcheckString('-lz5-', {offset: 2}) ||\n\t\tcheckString('-lhd-', {offset: 2})\n\t) {\n\t\treturn {\n\t\t\text: 'lzh',\n\t\t\tmime: 'application/x-lzh-compressed'\n\t\t};\n\t}\n\n\t// MPEG program stream (PS or MPEG-PS)\n\tif (check([0x00, 0x00, 0x01, 0xBA])) {\n\t\t//  MPEG-PS, MPEG-1 Part 1\n\t\tif (check([0x21], {offset: 4, mask: [0xF1]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .ps, .mpeg\n\t\t\t\tmime: 'video/MP1S'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG-PS, MPEG-2 Part 1\n\t\tif (check([0x44], {offset: 4, mask: [0xC4]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .mpg, .m2p, .vob or .sub\n\t\t\t\tmime: 'video/MP2P'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('ITSF')) {\n\t\treturn {\n\t\t\text: 'chm',\n\t\t\tmime: 'application/vnd.ms-htmlhelp'\n\t\t};\n\t}\n\n\t// -- 6-byte signatures --\n\n\tif (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n\t\treturn {\n\t\t\text: 'xz',\n\t\t\tmime: 'application/x-xz'\n\t\t};\n\t}\n\n\tif (checkString('<?xml ')) {\n\t\treturn {\n\t\t\text: 'xml',\n\t\t\tmime: 'application/xml'\n\t\t};\n\t}\n\n\tif (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n\t\treturn {\n\t\t\text: '7z',\n\t\t\tmime: 'application/x-7z-compressed'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) &&\n\t\t(buffer[6] === 0x0 || buffer[6] === 0x1)\n\t) {\n\t\treturn {\n\t\t\text: 'rar',\n\t\t\tmime: 'application/x-rar-compressed'\n\t\t};\n\t}\n\n\tif (checkString('solid ')) {\n\t\treturn {\n\t\t\text: 'stl',\n\t\t\tmime: 'model/stl'\n\t\t};\n\t}\n\n\t// -- 7-byte signatures --\n\n\tif (checkString('BLENDER')) {\n\t\treturn {\n\t\t\text: 'blend',\n\t\t\tmime: 'application/x-blender'\n\t\t};\n\t}\n\n\tif (checkString('!<arch>')) {\n\t\tawait tokenizer.ignore(8);\n\t\tconst str = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\t\tif (str === 'debian-binary') {\n\t\t\treturn {\n\t\t\t\text: 'deb',\n\t\t\t\tmime: 'application/x-deb'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ar',\n\t\t\tmime: 'application/x-unix-archive'\n\t\t};\n\t}\n\n\t// -- 8-byte signatures --\n\n\tif (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t// APNG format (https://wiki.mozilla.org/APNG_Specification)\n\t\t// 1. Find the first IDAT (image data) chunk (49 44 41 54)\n\t\t// 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n\t\t// Offset calculated as follows:\n\t\t// - 8 bytes: PNG signature\n\t\t// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n\t\tawait tokenizer.ignore(8); // ignore PNG signature\n\n\t\tasync function readChunkHeader() {\n\t\t\treturn {\n\t\t\t\tlength: await tokenizer.readToken(Token.INT32_BE),\n\t\t\t\ttype: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n\t\t\t};\n\t\t}\n\n\t\tdo {\n\t\t\tconst chunk = await readChunkHeader();\n\t\t\tif (chunk.length < 0) {\n\t\t\t\treturn; // Invalid chunk length\n\t\t\t}\n\n\t\t\tswitch (chunk.type) {\n\t\t\t\tcase 'IDAT':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'png',\n\t\t\t\t\t\tmime: 'image/png'\n\t\t\t\t\t};\n\t\t\t\tcase 'acTL':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'apng',\n\t\t\t\t\t\tmime: 'image/apng'\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tawait tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\n\t\t\t}\n\t\t} while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n\t\treturn {\n\t\t\text: 'png',\n\t\t\tmime: 'image/png'\n\t\t};\n\t}\n\n\tif (check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'arrow',\n\t\t\tmime: 'application/x-apache-arrow'\n\t\t};\n\t}\n\n\tif (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'glb',\n\t\t\tmime: 'model/gltf-binary'\n\t\t};\n\t}\n\n\t// `mov` format variants\n\tif (\n\t\tcheck([0x66, 0x72, 0x65, 0x65], {offset: 4}) || // `free`\n\t\tcheck([0x6D, 0x64, 0x61, 0x74], {offset: 4}) || // `mdat` MJPEG\n\t\tcheck([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) || // `moov`\n\t\tcheck([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`\n\t) {\n\t\treturn {\n\t\t\text: 'mov',\n\t\t\tmime: 'video/quicktime'\n\t\t};\n\t}\n\n\t// -- 9-byte signatures --\n\n\tif (check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n\t\treturn {\n\t\t\text: 'orf',\n\t\t\tmime: 'image/x-olympus-orf'\n\t\t};\n\t}\n\n\tif (checkString('gimp xcf ')) {\n\t\treturn {\n\t\t\text: 'xcf',\n\t\t\tmime: 'image/x-xcf'\n\t\t};\n\t}\n\n\t// -- 12-byte signatures --\n\n\tif (check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n\t\treturn {\n\t\t\text: 'rw2',\n\t\t\tmime: 'image/x-panasonic-rw2'\n\t\t};\n\t}\n\n\t// ASF_Header_Object first 80 bytes\n\tif (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n\t\tasync function readHeader() {\n\t\t\tconst guid = Buffer.alloc(16);\n\t\t\tawait tokenizer.readBuffer(guid);\n\t\t\treturn {\n\t\t\t\tid: guid,\n\t\t\t\tsize: Number(await tokenizer.readToken(Token.UINT64_LE))\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(30);\n\t\t// Search for header should be in first 1KB of file.\n\t\twhile (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n\t\t\tconst header = await readHeader();\n\t\t\tlet payload = header.size - 24;\n\t\t\tif (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n\t\t\t\tconst typeId = Buffer.alloc(16);\n\t\t\t\tpayload -= await tokenizer.readBuffer(typeId);\n\n\t\t\t\tif (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found audio:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'audio/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found video:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'video/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(payload);\n\t\t}\n\n\t\t// Default to ASF generic extension\n\t\treturn {\n\t\t\text: 'asf',\n\t\t\tmime: 'application/vnd.ms-asf'\n\t\t};\n\t}\n\n\tif (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\treturn {\n\t\t\text: 'ktx',\n\t\t\tmime: 'image/ktx'\n\t\t};\n\t}\n\n\tif ((check([0x7E, 0x10, 0x04]) || check([0x7E, 0x18, 0x04])) && check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {\n\t\treturn {\n\t\t\text: 'mie',\n\t\t\tmime: 'application/x-mie'\n\t\t};\n\t}\n\n\tif (check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {\n\t\treturn {\n\t\t\text: 'shp',\n\t\t\tmime: 'application/x-esri-shape'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n\t\t// JPEG-2000 family\n\n\t\tawait tokenizer.ignore(20);\n\t\tconst type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\t\tswitch (type) {\n\t\t\tcase 'jp2 ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jp2',\n\t\t\t\t\tmime: 'image/jp2'\n\t\t\t\t};\n\t\t\tcase 'jpx ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpx',\n\t\t\t\t\tmime: 'image/jpx'\n\t\t\t\t};\n\t\t\tcase 'jpm ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpm',\n\t\t\t\t\tmime: 'image/jpm'\n\t\t\t\t};\n\t\t\tcase 'mjp2':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mj2',\n\t\t\t\t\tmime: 'image/mj2'\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tif (\n\t\tcheck([0xFF, 0x0A]) ||\n\t\tcheck([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])\n\t) {\n\t\treturn {\n\t\t\text: 'jxl',\n\t\t\tmime: 'image/jxl'\n\t\t};\n\t}\n\n\t// -- Unsafe signatures --\n\n\tif (\n\t\tcheck([0x0, 0x0, 0x1, 0xBA]) ||\n\t\tcheck([0x0, 0x0, 0x1, 0xB3])\n\t) {\n\t\treturn {\n\t\t\text: 'mpg',\n\t\t\tmime: 'video/mpeg'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'ttf',\n\t\t\tmime: 'font/ttf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x01, 0x00])) {\n\t\treturn {\n\t\t\text: 'ico',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x02, 0x00])) {\n\t\treturn {\n\t\t\text: 'cur',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n\t\t// Detected Microsoft Compound File Binary File (MS-CFB) Format.\n\t\treturn {\n\t\t\text: 'cfb',\n\t\t\tmime: 'application/x-cfb'\n\t\t};\n\t}\n\n\t// Increase sample size from 12 to 256.\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// -- 15-byte signatures --\n\n\tif (checkString('BEGIN:')) {\n\t\tif (checkString('VCARD', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'vcf',\n\t\t\t\tmime: 'text/vcard'\n\t\t\t};\n\t\t}\n\n\t\tif (checkString('VCALENDAR', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'ics',\n\t\t\t\tmime: 'text/calendar'\n\t\t\t};\n\t\t}\n\t}\n\n\t// `raf` is here just to keep all the raw image detectors together.\n\tif (checkString('FUJIFILMCCD-RAW')) {\n\t\treturn {\n\t\t\text: 'raf',\n\t\t\tmime: 'image/x-fujifilm-raf'\n\t\t};\n\t}\n\n\tif (checkString('Extended Module:')) {\n\t\treturn {\n\t\t\text: 'xm',\n\t\t\tmime: 'audio/x-xm'\n\t\t};\n\t}\n\n\tif (checkString('Creative Voice File')) {\n\t\treturn {\n\t\t\text: 'voc',\n\t\t\tmime: 'audio/x-voc'\n\t\t};\n\t}\n\n\tif (check([0x04, 0x00, 0x00, 0x00]) && buffer.length >= 16) { // Rough & quick check Pickle/ASAR\n\t\tconst jsonSize = buffer.readUInt32LE(12);\n\t\tif (jsonSize > 12 && buffer.length >= jsonSize + 16) {\n\t\t\ttry {\n\t\t\t\tconst header = buffer.slice(16, jsonSize + 16).toString();\n\t\t\t\tconst json = JSON.parse(header);\n\t\t\t\t// Check if Pickle is ASAR\n\t\t\t\tif (json.files) { // Final check, assuring Pickle/ASAR format\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asar',\n\t\t\t\t\t\tmime: 'application/x-asar'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t}\n\t\t}\n\t}\n\n\tif (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n\t\treturn {\n\t\t\text: 'mxf',\n\t\t\tmime: 'application/mxf'\n\t\t};\n\t}\n\n\tif (checkString('SCRM', {offset: 44})) {\n\t\treturn {\n\t\t\text: 's3m',\n\t\t\tmime: 'audio/x-s3m'\n\t\t};\n\t}\n\n\tif (check([0x47], {offset: 4}) && (check([0x47], {offset: 192}) || check([0x47], {offset: 196}))) {\n\t\treturn {\n\t\t\text: 'mts',\n\t\t\tmime: 'video/mp2t'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\n\t\treturn {\n\t\t\text: 'mobi',\n\t\t\tmime: 'application/x-mobipocket-ebook'\n\t\t};\n\t}\n\n\tif (check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\n\t\treturn {\n\t\t\text: 'dcm',\n\t\t\tmime: 'application/dicom'\n\t\t};\n\t}\n\n\tif (check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n\t\treturn {\n\t\t\text: 'lnk',\n\t\t\tmime: 'application/x.ms.shortcut' // Invented by us\n\t\t};\n\t}\n\n\tif (check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'alias',\n\t\t\tmime: 'application/x.apple.alias' // Invented by us\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x4C, 0x50], {offset: 34}) &&\n\t\t(\n\t\t\tcheck([0x00, 0x00, 0x01], {offset: 8}) ||\n\t\t\tcheck([0x01, 0x00, 0x02], {offset: 8}) ||\n\t\t\tcheck([0x02, 0x00, 0x02], {offset: 8})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'eot',\n\t\t\tmime: 'application/vnd.ms-fontobject'\n\t\t};\n\t}\n\n\tif (check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n\t\treturn {\n\t\t\text: 'indd',\n\t\t\tmime: 'application/x-indesign'\n\t\t};\n\t}\n\n\t// Increase sample size from 256 to 512\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// Requires a buffer size of 512 bytes\n\tif (tarHeaderChecksumMatches(buffer)) {\n\t\treturn {\n\t\t\text: 'tar',\n\t\t\tmime: 'application/x-tar'\n\t\t};\n\t}\n\n\tif (check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n\t\treturn {\n\t\t\text: 'skp',\n\t\t\tmime: 'application/vnd.sketchup.skp'\n\t\t};\n\t}\n\n\tif (checkString('-----BEGIN PGP MESSAGE-----')) {\n\t\treturn {\n\t\t\text: 'pgp',\n\t\t\tmime: 'application/pgp-encrypted'\n\t\t};\n\t}\n\n\t// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\tif (buffer.length >= 2 && check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {\n\t\tif (check([0x10], {offset: 1, mask: [0x16]})) {\n\t\t\t// Check for (ADTS) MPEG-2\n\t\t\tif (check([0x08], {offset: 1, mask: [0x08]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'aac',\n\t\t\t\t\tmime: 'audio/aac'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Must be (ADTS) MPEG-4\n\t\t\treturn {\n\t\t\t\text: 'aac',\n\t\t\t\tmime: 'audio/aac'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG 1 or 2 Layer 3 header\n\t\t// Check for MPEG layer 3\n\t\tif (check([0x02], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 2\n\t\tif (check([0x04], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp2',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 1\n\t\tif (check([0x06], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp1',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\t}\n}\n\nconst stream = readableStream => new Promise((resolve, reject) => {\n\t// Using `eval` to work around issues when bundling with Webpack\n\tconst stream = eval('require')('stream'); // eslint-disable-line no-eval\n\n\treadableStream.on('error', reject);\n\treadableStream.once('readable', async () => {\n\t\t// Set up output stream\n\t\tconst pass = new stream.PassThrough();\n\t\tlet outputStream;\n\t\tif (stream.pipeline) {\n\t\t\toutputStream = stream.pipeline(readableStream, pass, () => {\n\t\t\t});\n\t\t} else {\n\t\t\toutputStream = readableStream.pipe(pass);\n\t\t}\n\n\t\t// Read the input stream and detect the filetype\n\t\tconst chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);\n\t\ttry {\n\t\t\tconst fileType = await fromBuffer(chunk);\n\t\t\tpass.fileType = fileType;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\n\t\tresolve(outputStream);\n\t});\n});\n\nconst fileType = {\n\tfromStream,\n\tfromTokenizer,\n\tfromBuffer,\n\tstream\n};\n\nObject.defineProperty(fileType, 'extensions', {\n\tget() {\n\t\treturn new Set(supported.extensions);\n\t}\n});\n\nObject.defineProperty(fileType, 'mimeTypes', {\n\tget() {\n\t\treturn new Set(supported.mimeTypes);\n\t}\n});\n\nmodule.exports = fileType;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}