{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars, class-methods-use-this */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Authenticator = void 0;\n/**\n * Base Authenticator class for other Authenticators to extend. Not intended\n * to be used as a stand-alone authenticator.\n */\nvar Authenticator = /** @class */function () {\n  /**\n   * Create a new Authenticator instance.\n   *\n   * @throws Error: the \"new\" keyword was not used to construct the authenticator.\n   */\n  function Authenticator() {\n    if (!(this instanceof Authenticator)) {\n      throw new Error('the \"new\" keyword is required to create authenticator instances');\n    }\n  }\n  /**\n   * Augment the request with authentication information.\n   *\n   * @param requestOptions - The request to augment with authentication information.\n   * @throws Error: The authenticate method was not implemented by a subclass.\n   */\n  Authenticator.prototype.authenticate = function (requestOptions) {\n    var error = new Error('Should be implemented by subclass!');\n    return Promise.reject(error);\n  };\n  /**\n   * Retrieves the authenticator's type.\n   * The returned value will be the same string that is used\n   * when configuring an instance of the authenticator with the\n   * \\<service_name\\>_AUTH_TYPE configuration property\n   * (e.g. \"basic\", \"iam\", etc.).\n   * This function should be overridden in each authenticator\n   * implementation class that extends this class.\n   *\n   * @returns a string that indicates the authenticator's type\n   */\n  Authenticator.prototype.authenticationType = function () {\n    return Authenticator.AUTHTYPE_UNKNOWN;\n  };\n  /**\n   * Constants that define the various authenticator types.\n   */\n  Authenticator.AUTHTYPE_BASIC = 'basic';\n  Authenticator.AUTHTYPE_BEARERTOKEN = 'bearerToken';\n  Authenticator.AUTHTYPE_IAM = 'iam';\n  Authenticator.AUTHTYPE_CONTAINER = 'container';\n  Authenticator.AUTHTYPE_CP4D = 'cp4d';\n  Authenticator.AUTHTYPE_NOAUTH = 'noAuth';\n  Authenticator.AUTHTYPE_VPC = 'vpc';\n  Authenticator.AUTHTYPE_MCSP = 'mcsp';\n  Authenticator.AUTHTYPE_UNKNOWN = 'unknown';\n  return Authenticator;\n}();\nexports.Authenticator = Authenticator;","map":{"version":3,"names":["Object","defineProperty","exports","value","Authenticator","Error","prototype","authenticate","requestOptions","error","Promise","reject","authenticationType","AUTHTYPE_UNKNOWN","AUTHTYPE_BASIC","AUTHTYPE_BEARERTOKEN","AUTHTYPE_IAM","AUTHTYPE_CONTAINER","AUTHTYPE_CP4D","AUTHTYPE_NOAUTH","AUTHTYPE_VPC","AUTHTYPE_MCSP"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/authenticators/authenticator.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/no-unused-vars, class-methods-use-this */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Authenticator = void 0;\n/**\n * Base Authenticator class for other Authenticators to extend. Not intended\n * to be used as a stand-alone authenticator.\n */\nvar Authenticator = /** @class */ (function () {\n    /**\n     * Create a new Authenticator instance.\n     *\n     * @throws Error: the \"new\" keyword was not used to construct the authenticator.\n     */\n    function Authenticator() {\n        if (!(this instanceof Authenticator)) {\n            throw new Error('the \"new\" keyword is required to create authenticator instances');\n        }\n    }\n    /**\n     * Augment the request with authentication information.\n     *\n     * @param requestOptions - The request to augment with authentication information.\n     * @throws Error: The authenticate method was not implemented by a subclass.\n     */\n    Authenticator.prototype.authenticate = function (requestOptions) {\n        var error = new Error('Should be implemented by subclass!');\n        return Promise.reject(error);\n    };\n    /**\n     * Retrieves the authenticator's type.\n     * The returned value will be the same string that is used\n     * when configuring an instance of the authenticator with the\n     * \\<service_name\\>_AUTH_TYPE configuration property\n     * (e.g. \"basic\", \"iam\", etc.).\n     * This function should be overridden in each authenticator\n     * implementation class that extends this class.\n     *\n     * @returns a string that indicates the authenticator's type\n     */\n    Authenticator.prototype.authenticationType = function () {\n        return Authenticator.AUTHTYPE_UNKNOWN;\n    };\n    /**\n     * Constants that define the various authenticator types.\n     */\n    Authenticator.AUTHTYPE_BASIC = 'basic';\n    Authenticator.AUTHTYPE_BEARERTOKEN = 'bearerToken';\n    Authenticator.AUTHTYPE_IAM = 'iam';\n    Authenticator.AUTHTYPE_CONTAINER = 'container';\n    Authenticator.AUTHTYPE_CP4D = 'cp4d';\n    Authenticator.AUTHTYPE_NOAUTH = 'noAuth';\n    Authenticator.AUTHTYPE_VPC = 'vpc';\n    Authenticator.AUTHTYPE_MCSP = 'mcsp';\n    Authenticator.AUTHTYPE_UNKNOWN = 'unknown';\n    return Authenticator;\n}());\nexports.Authenticator = Authenticator;\n"],"mappings":"AAAA,YAAY;;AACZ;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B;AACA;AACA;AACA;AACA,IAAIA,aAAa,GAAG,aAAe,YAAY;EAC3C;AACJ;AACA;AACA;AACA;EACI,SAASA,aAAaA,CAAA,EAAG;IACrB,IAAI,EAAE,IAAI,YAAYA,aAAa,CAAC,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;IACtF;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACID,aAAa,CAACE,SAAS,CAACC,YAAY,GAAG,UAAUC,cAAc,EAAE;IAC7D,IAAIC,KAAK,GAAG,IAAIJ,KAAK,CAAC,oCAAoC,CAAC;IAC3D,OAAOK,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAChC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,aAAa,CAACE,SAAS,CAACM,kBAAkB,GAAG,YAAY;IACrD,OAAOR,aAAa,CAACS,gBAAgB;EACzC,CAAC;EACD;AACJ;AACA;EACIT,aAAa,CAACU,cAAc,GAAG,OAAO;EACtCV,aAAa,CAACW,oBAAoB,GAAG,aAAa;EAClDX,aAAa,CAACY,YAAY,GAAG,KAAK;EAClCZ,aAAa,CAACa,kBAAkB,GAAG,WAAW;EAC9Cb,aAAa,CAACc,aAAa,GAAG,MAAM;EACpCd,aAAa,CAACe,eAAe,GAAG,QAAQ;EACxCf,aAAa,CAACgB,YAAY,GAAG,KAAK;EAClChB,aAAa,CAACiB,aAAa,GAAG,MAAM;EACpCjB,aAAa,CAACS,gBAAgB,GAAG,SAAS;EAC1C,OAAOT,aAAa;AACxB,CAAC,CAAC,CAAE;AACJF,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}