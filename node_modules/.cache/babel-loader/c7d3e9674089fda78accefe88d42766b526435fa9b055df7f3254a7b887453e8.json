{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2021, 202e IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContainerAuthenticator = void 0;\nvar authenticator_1 = require(\"./authenticator\");\nvar container_token_manager_1 = require(\"../token-managers/container-token-manager\");\nvar iam_request_based_authenticator_1 = require(\"./iam-request-based-authenticator\");\n/**\n * The ContainerAuthenticator will read a compute resource token from the file system\n * and use this value to obtain a bearer token from the IAM token server.  When the bearer\n * token expires, a new token is obtained from the token server.\n *\n * The bearer token will be sent as an Authorization header in the form:\n *\n *      Authorization: Bearer \\<bearer-token\\>\n */\nvar ContainerAuthenticator = /** @class */function (_super) {\n  __extends(ContainerAuthenticator, _super);\n  /**\n   *\n   * Create a new ContainerAuthenticator instance.\n   *\n   * @param options - Configuration options for IAM authentication.\n   * This should be an object containing these fields:\n   * - url: (optional) the endpoint URL for the token service\n   * - crTokenFilename: (optional) the file containing the compute resource token\n   * - iamProfileName: (optional) the name of the IAM trusted profile associated with the compute resource token (required if iamProfileId is not specified)\n   * - iamProfileId]: (optional) the ID of the IAM trusted profile associated with the compute resource token (required if iamProfileName is not specified)\n   * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n   * should be disabled or not\n   * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n   * - clientId: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n   * Authorization header to be included in each request to the token service\n   * - clientSecret: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n   * Authorization header to be included in each request to the token service\n   * - scope: (optional) the \"scope\" parameter to use when fetching the bearer token from the token service\n   *\n   * @throws Error: the configuration options are not valid.\n   */\n  function ContainerAuthenticator(options) {\n    var _this = _super.call(this, options) || this;\n    // the param names are shared between the authenticator and the token\n    // manager so we can just pass along the options object\n    // the token manager will also handle the validation of required options\n    _this.tokenManager = new container_token_manager_1.ContainerTokenManager(options);\n    _this.crTokenFilename = options.crTokenFilename;\n    _this.iamProfileName = options.iamProfileName;\n    _this.iamProfileId = options.iamProfileId;\n    return _this;\n  }\n  /**\n   * Setter for the filename of the compute resource token.\n   * @param crTokenFilename - A string containing a path to the CR token file\n   */\n  ContainerAuthenticator.prototype.setCrTokenFilename = function (crTokenFilename) {\n    this.crTokenFilename = crTokenFilename;\n    // update properties in token manager\n    this.tokenManager.setCrTokenFilename(crTokenFilename);\n  };\n  /**\n   * Setter for the \"profile_name\" parameter to use when fetching the bearer token from the IAM token server.\n   * @param iamProfileName - the name of the IAM trusted profile\n   */\n  ContainerAuthenticator.prototype.setIamProfileName = function (iamProfileName) {\n    this.iamProfileName = iamProfileName;\n    // update properties in token manager\n    this.tokenManager.setIamProfileName(iamProfileName);\n  };\n  /**\n   * Setter for the \"profile_id\" parameter to use when fetching the bearer token from the IAM token server.\n   * @param iamProfileId - the ID of the IAM trusted profile\n   */\n  ContainerAuthenticator.prototype.setIamProfileId = function (iamProfileId) {\n    this.iamProfileId = iamProfileId;\n    // update properties in token manager\n    this.tokenManager.setIamProfileId(iamProfileId);\n  };\n  /**\n   * Returns the authenticator's type ('container').\n   *\n   * @returns a string that indicates the authenticator's type\n   */\n  // eslint-disable-next-line class-methods-use-this\n  ContainerAuthenticator.prototype.authenticationType = function () {\n    return authenticator_1.Authenticator.AUTHTYPE_CONTAINER;\n  };\n  return ContainerAuthenticator;\n}(iam_request_based_authenticator_1.IamRequestBasedAuthenticator);\nexports.ContainerAuthenticator = ContainerAuthenticator;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","ContainerAuthenticator","authenticator_1","require","container_token_manager_1","iam_request_based_authenticator_1","_super","options","_this","tokenManager","ContainerTokenManager","crTokenFilename","iamProfileName","iamProfileId","setCrTokenFilename","setIamProfileName","setIamProfileId","authenticationType","Authenticator","AUTHTYPE_CONTAINER","IamRequestBasedAuthenticator"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/authenticators/container-authenticator.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2021, 202e IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerAuthenticator = void 0;\nvar authenticator_1 = require(\"./authenticator\");\nvar container_token_manager_1 = require(\"../token-managers/container-token-manager\");\nvar iam_request_based_authenticator_1 = require(\"./iam-request-based-authenticator\");\n/**\n * The ContainerAuthenticator will read a compute resource token from the file system\n * and use this value to obtain a bearer token from the IAM token server.  When the bearer\n * token expires, a new token is obtained from the token server.\n *\n * The bearer token will be sent as an Authorization header in the form:\n *\n *      Authorization: Bearer \\<bearer-token\\>\n */\nvar ContainerAuthenticator = /** @class */ (function (_super) {\n    __extends(ContainerAuthenticator, _super);\n    /**\n     *\n     * Create a new ContainerAuthenticator instance.\n     *\n     * @param options - Configuration options for IAM authentication.\n     * This should be an object containing these fields:\n     * - url: (optional) the endpoint URL for the token service\n     * - crTokenFilename: (optional) the file containing the compute resource token\n     * - iamProfileName: (optional) the name of the IAM trusted profile associated with the compute resource token (required if iamProfileId is not specified)\n     * - iamProfileId]: (optional) the ID of the IAM trusted profile associated with the compute resource token (required if iamProfileName is not specified)\n     * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n     * should be disabled or not\n     * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n     * - clientId: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n     * Authorization header to be included in each request to the token service\n     * - clientSecret: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n     * Authorization header to be included in each request to the token service\n     * - scope: (optional) the \"scope\" parameter to use when fetching the bearer token from the token service\n     *\n     * @throws Error: the configuration options are not valid.\n     */\n    function ContainerAuthenticator(options) {\n        var _this = _super.call(this, options) || this;\n        // the param names are shared between the authenticator and the token\n        // manager so we can just pass along the options object\n        // the token manager will also handle the validation of required options\n        _this.tokenManager = new container_token_manager_1.ContainerTokenManager(options);\n        _this.crTokenFilename = options.crTokenFilename;\n        _this.iamProfileName = options.iamProfileName;\n        _this.iamProfileId = options.iamProfileId;\n        return _this;\n    }\n    /**\n     * Setter for the filename of the compute resource token.\n     * @param crTokenFilename - A string containing a path to the CR token file\n     */\n    ContainerAuthenticator.prototype.setCrTokenFilename = function (crTokenFilename) {\n        this.crTokenFilename = crTokenFilename;\n        // update properties in token manager\n        this.tokenManager.setCrTokenFilename(crTokenFilename);\n    };\n    /**\n     * Setter for the \"profile_name\" parameter to use when fetching the bearer token from the IAM token server.\n     * @param iamProfileName - the name of the IAM trusted profile\n     */\n    ContainerAuthenticator.prototype.setIamProfileName = function (iamProfileName) {\n        this.iamProfileName = iamProfileName;\n        // update properties in token manager\n        this.tokenManager.setIamProfileName(iamProfileName);\n    };\n    /**\n     * Setter for the \"profile_id\" parameter to use when fetching the bearer token from the IAM token server.\n     * @param iamProfileId - the ID of the IAM trusted profile\n     */\n    ContainerAuthenticator.prototype.setIamProfileId = function (iamProfileId) {\n        this.iamProfileId = iamProfileId;\n        // update properties in token manager\n        this.tokenManager.setIamProfileId(iamProfileId);\n    };\n    /**\n     * Returns the authenticator's type ('container').\n     *\n     * @returns a string that indicates the authenticator's type\n     */\n    // eslint-disable-next-line class-methods-use-this\n    ContainerAuthenticator.prototype.authenticationType = function () {\n        return authenticator_1.Authenticator.AUTHTYPE_CONTAINER;\n    };\n    return ContainerAuthenticator;\n}(iam_request_based_authenticator_1.IamRequestBasedAuthenticator));\nexports.ContainerAuthenticator = ContainerAuthenticator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}