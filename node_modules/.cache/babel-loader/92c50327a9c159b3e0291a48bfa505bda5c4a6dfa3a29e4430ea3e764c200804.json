{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnsiStringType = exports.StringType = exports.BufferType = exports.Uint8ArrayType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\nconst ieee754 = require(\"ieee754\");\n// Primitive types\nfunction dv(array) {\n  return new DataView(array.buffer, array.byteOffset);\n}\n/**\n * 8-bit unsigned integer\n */\nexports.UINT8 = {\n  len: 1,\n  get(array, offset) {\n    return dv(array).getUint8(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setUint8(offset, value);\n    return offset + 1;\n  }\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\nexports.UINT16_LE = {\n  len: 2,\n  get(array, offset) {\n    return dv(array).getUint16(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setUint16(offset, value, true);\n    return offset + 2;\n  }\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\nexports.UINT16_BE = {\n  len: 2,\n  get(array, offset) {\n    return dv(array).getUint16(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setUint16(offset, value);\n    return offset + 2;\n  }\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\nexports.UINT24_LE = {\n  len: 3,\n  get(array, offset) {\n    const dataView = dv(array);\n    return dataView.getUint8(offset) + (dataView.getUint16(offset + 1, true) << 8);\n  },\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint8(offset, value & 0xff);\n    dataView.setUint16(offset + 1, value >> 8, true);\n    return offset + 3;\n  }\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\nexports.UINT24_BE = {\n  len: 3,\n  get(array, offset) {\n    const dataView = dv(array);\n    return (dataView.getUint16(offset) << 8) + dataView.getUint8(offset + 2);\n  },\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint16(offset, value >> 8);\n    dataView.setUint8(offset + 2, value & 0xff);\n    return offset + 3;\n  }\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\nexports.UINT32_LE = {\n  len: 4,\n  get(array, offset) {\n    return dv(array).getUint32(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setUint32(offset, value, true);\n    return offset + 4;\n  }\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\nexports.UINT32_BE = {\n  len: 4,\n  get(array, offset) {\n    return dv(array).getUint32(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setUint32(offset, value);\n    return offset + 4;\n  }\n};\n/**\n * 8-bit signed integer\n */\nexports.INT8 = {\n  len: 1,\n  get(array, offset) {\n    return dv(array).getInt8(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setInt8(offset, value);\n    return offset + 1;\n  }\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\nexports.INT16_BE = {\n  len: 2,\n  get(array, offset) {\n    return dv(array).getInt16(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setInt16(offset, value);\n    return offset + 2;\n  }\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\nexports.INT16_LE = {\n  len: 2,\n  get(array, offset) {\n    return dv(array).getInt16(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setInt16(offset, value, true);\n    return offset + 2;\n  }\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\nexports.INT24_LE = {\n  len: 3,\n  get(array, offset) {\n    const unsigned = exports.UINT24_LE.get(array, offset);\n    return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n  },\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint8(offset, value & 0xff);\n    dataView.setUint16(offset + 1, value >> 8, true);\n    return offset + 3;\n  }\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\nexports.INT24_BE = {\n  len: 3,\n  get(array, offset) {\n    const unsigned = exports.UINT24_BE.get(array, offset);\n    return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n  },\n  put(array, offset, value) {\n    const dataView = dv(array);\n    dataView.setUint16(offset, value >> 8);\n    dataView.setUint8(offset + 2, value & 0xff);\n    return offset + 3;\n  }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_BE = {\n  len: 4,\n  get(array, offset) {\n    return dv(array).getInt32(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setInt32(offset, value);\n    return offset + 4;\n  }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_LE = {\n  len: 4,\n  get(array, offset) {\n    return dv(array).getInt32(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setInt32(offset, value, true);\n    return offset + 4;\n  }\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\nexports.UINT64_LE = {\n  len: 8,\n  get(array, offset) {\n    return dv(array).getBigUint64(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setBigUint64(offset, value, true);\n    return offset + 8;\n  }\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\nexports.INT64_LE = {\n  len: 8,\n  get(array, offset) {\n    return dv(array).getBigInt64(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setBigInt64(offset, value, true);\n    return offset + 8;\n  }\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\nexports.UINT64_BE = {\n  len: 8,\n  get(array, offset) {\n    return dv(array).getBigUint64(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setBigUint64(offset, value);\n    return offset + 8;\n  }\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\nexports.INT64_BE = {\n  len: 8,\n  get(array, offset) {\n    return dv(array).getBigInt64(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setBigInt64(offset, value);\n    return offset + 8;\n  }\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\nexports.Float16_BE = {\n  len: 2,\n  get(dataView, offset) {\n    return ieee754.read(dataView, offset, false, 10, this.len);\n  },\n  put(dataView, offset, value) {\n    ieee754.write(dataView, value, offset, false, 10, this.len);\n    return offset + this.len;\n  }\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\nexports.Float16_LE = {\n  len: 2,\n  get(array, offset) {\n    return ieee754.read(array, offset, true, 10, this.len);\n  },\n  put(array, offset, value) {\n    ieee754.write(array, value, offset, true, 10, this.len);\n    return offset + this.len;\n  }\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\nexports.Float32_BE = {\n  len: 4,\n  get(array, offset) {\n    return dv(array).getFloat32(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setFloat32(offset, value);\n    return offset + 4;\n  }\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\nexports.Float32_LE = {\n  len: 4,\n  get(array, offset) {\n    return dv(array).getFloat32(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setFloat32(offset, value, true);\n    return offset + 4;\n  }\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\nexports.Float64_BE = {\n  len: 8,\n  get(array, offset) {\n    return dv(array).getFloat64(offset);\n  },\n  put(array, offset, value) {\n    dv(array).setFloat64(offset, value);\n    return offset + 8;\n  }\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\nexports.Float64_LE = {\n  len: 8,\n  get(array, offset) {\n    return dv(array).getFloat64(offset, true);\n  },\n  put(array, offset, value) {\n    dv(array).setFloat64(offset, value, true);\n    return offset + 8;\n  }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\nexports.Float80_BE = {\n  len: 10,\n  get(array, offset) {\n    return ieee754.read(array, offset, false, 63, this.len);\n  },\n  put(array, offset, value) {\n    ieee754.write(array, value, offset, false, 63, this.len);\n    return offset + this.len;\n  }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\nexports.Float80_LE = {\n  len: 10,\n  get(array, offset) {\n    return ieee754.read(array, offset, true, 63, this.len);\n  },\n  put(array, offset, value) {\n    ieee754.write(array, value, offset, true, 63, this.len);\n    return offset + this.len;\n  }\n};\n/**\n * Ignore a given number of bytes\n */\nclass IgnoreType {\n  /**\n   * @param len number of bytes to ignore\n   */\n  constructor(len) {\n    this.len = len;\n  }\n  // ToDo: don't read, but skip data\n  get(array, off) {}\n}\nexports.IgnoreType = IgnoreType;\nclass Uint8ArrayType {\n  constructor(len) {\n    this.len = len;\n  }\n  get(array, offset) {\n    return array.subarray(offset, offset + this.len);\n  }\n}\nexports.Uint8ArrayType = Uint8ArrayType;\nclass BufferType {\n  constructor(len) {\n    this.len = len;\n  }\n  get(uint8Array, off) {\n    return Buffer.from(uint8Array.subarray(off, off + this.len));\n  }\n}\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\nclass StringType {\n  constructor(len, encoding) {\n    this.len = len;\n    this.encoding = encoding;\n  }\n  get(uint8Array, offset) {\n    return Buffer.from(uint8Array).toString(this.encoding, offset, offset + this.len);\n  }\n}\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\nclass AnsiStringType {\n  constructor(len) {\n    this.len = len;\n  }\n  static decode(buffer, offset, until) {\n    let str = '';\n    for (let i = offset; i < until; ++i) {\n      str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n    }\n    return str;\n  }\n  static inRange(a, min, max) {\n    return min <= a && a <= max;\n  }\n  static codePointToString(cp) {\n    if (cp <= 0xFFFF) {\n      return String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  static singleByteDecoder(bite) {\n    if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n      return bite;\n    }\n    const codePoint = AnsiStringType.windows1252[bite - 0x80];\n    if (codePoint === null) {\n      throw Error('invaliding encoding');\n    }\n    return codePoint;\n  }\n  get(buffer, offset = 0) {\n    return AnsiStringType.decode(buffer, offset, offset + this.len);\n  }\n}\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];","map":{"version":3,"names":["Object","defineProperty","exports","value","AnsiStringType","StringType","BufferType","Uint8ArrayType","IgnoreType","Float80_LE","Float80_BE","Float64_LE","Float64_BE","Float32_LE","Float32_BE","Float16_LE","Float16_BE","INT64_BE","UINT64_BE","INT64_LE","UINT64_LE","INT32_LE","INT32_BE","INT24_BE","INT24_LE","INT16_LE","INT16_BE","INT8","UINT32_BE","UINT32_LE","UINT24_BE","UINT24_LE","UINT16_BE","UINT16_LE","UINT8","ieee754","require","dv","array","DataView","buffer","byteOffset","len","get","offset","getUint8","put","setUint8","getUint16","setUint16","dataView","getUint32","setUint32","getInt8","setInt8","getInt16","setInt16","unsigned","getInt32","setInt32","getBigUint64","setBigUint64","getBigInt64","setBigInt64","read","write","getFloat32","setFloat32","getFloat64","setFloat64","constructor","off","subarray","uint8Array","Buffer","from","encoding","toString","decode","until","str","i","codePointToString","singleByteDecoder","inRange","a","min","max","cp","String","fromCharCode","bite","codePoint","windows1252","Error"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/token-types/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnsiStringType = exports.StringType = exports.BufferType = exports.Uint8ArrayType = exports.IgnoreType = exports.Float80_LE = exports.Float80_BE = exports.Float64_LE = exports.Float64_BE = exports.Float32_LE = exports.Float32_BE = exports.Float16_LE = exports.Float16_BE = exports.INT64_BE = exports.UINT64_BE = exports.INT64_LE = exports.UINT64_LE = exports.INT32_LE = exports.INT32_BE = exports.INT24_BE = exports.INT24_LE = exports.INT16_LE = exports.INT16_BE = exports.INT8 = exports.UINT32_BE = exports.UINT32_LE = exports.UINT24_BE = exports.UINT24_LE = exports.UINT16_BE = exports.UINT16_LE = exports.UINT8 = void 0;\nconst ieee754 = require(\"ieee754\");\n// Primitive types\nfunction dv(array) {\n    return new DataView(array.buffer, array.byteOffset);\n}\n/**\n * 8-bit unsigned integer\n */\nexports.UINT8 = {\n    len: 1,\n    get(array, offset) {\n        return dv(array).getUint8(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint8(offset, value);\n        return offset + 1;\n    }\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\nexports.UINT16_LE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getUint16(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setUint16(offset, value, true);\n        return offset + 2;\n    }\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\nexports.UINT16_BE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getUint16(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint16(offset, value);\n        return offset + 2;\n    }\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\nexports.UINT24_LE = {\n    len: 3,\n    get(array, offset) {\n        const dataView = dv(array);\n        return dataView.getUint8(offset) + (dataView.getUint16(offset + 1, true) << 8);\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint8(offset, value & 0xff);\n        dataView.setUint16(offset + 1, value >> 8, true);\n        return offset + 3;\n    }\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\nexports.UINT24_BE = {\n    len: 3,\n    get(array, offset) {\n        const dataView = dv(array);\n        return (dataView.getUint16(offset) << 8) + dataView.getUint8(offset + 2);\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint16(offset, value >> 8);\n        dataView.setUint8(offset + 2, value & 0xff);\n        return offset + 3;\n    }\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\nexports.UINT32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getUint32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setUint32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\nexports.UINT32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getUint32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setUint32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * 8-bit signed integer\n */\nexports.INT8 = {\n    len: 1,\n    get(array, offset) {\n        return dv(array).getInt8(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt8(offset, value);\n        return offset + 1;\n    }\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\nexports.INT16_BE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getInt16(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt16(offset, value);\n        return offset + 2;\n    }\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\nexports.INT16_LE = {\n    len: 2,\n    get(array, offset) {\n        return dv(array).getInt16(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setInt16(offset, value, true);\n        return offset + 2;\n    }\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\nexports.INT24_LE = {\n    len: 3,\n    get(array, offset) {\n        const unsigned = exports.UINT24_LE.get(array, offset);\n        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint8(offset, value & 0xff);\n        dataView.setUint16(offset + 1, value >> 8, true);\n        return offset + 3;\n    }\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\nexports.INT24_BE = {\n    len: 3,\n    get(array, offset) {\n        const unsigned = exports.UINT24_BE.get(array, offset);\n        return unsigned > 0x7fffff ? unsigned - 0x1000000 : unsigned;\n    },\n    put(array, offset, value) {\n        const dataView = dv(array);\n        dataView.setUint16(offset, value >> 8);\n        dataView.setUint8(offset + 2, value & 0xff);\n        return offset + 3;\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getInt32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setInt32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getInt32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setInt32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\nexports.UINT64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigUint64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setBigUint64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\nexports.INT64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigInt64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setBigInt64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\nexports.UINT64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigUint64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setBigUint64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\nexports.INT64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getBigInt64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setBigInt64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\nexports.Float16_BE = {\n    len: 2,\n    get(dataView, offset) {\n        return ieee754.read(dataView, offset, false, 10, this.len);\n    },\n    put(dataView, offset, value) {\n        ieee754.write(dataView, value, offset, false, 10, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\nexports.Float16_LE = {\n    len: 2,\n    get(array, offset) {\n        return ieee754.read(array, offset, true, 10, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, true, 10, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\nexports.Float32_BE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getFloat32(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat32(offset, value);\n        return offset + 4;\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\nexports.Float32_LE = {\n    len: 4,\n    get(array, offset) {\n        return dv(array).getFloat32(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat32(offset, value, true);\n        return offset + 4;\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\nexports.Float64_BE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getFloat64(offset);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat64(offset, value);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\nexports.Float64_LE = {\n    len: 8,\n    get(array, offset) {\n        return dv(array).getFloat64(offset, true);\n    },\n    put(array, offset, value) {\n        dv(array).setFloat64(offset, value, true);\n        return offset + 8;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\nexports.Float80_BE = {\n    len: 10,\n    get(array, offset) {\n        return ieee754.read(array, offset, false, 63, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, false, 63, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\nexports.Float80_LE = {\n    len: 10,\n    get(array, offset) {\n        return ieee754.read(array, offset, true, 63, this.len);\n    },\n    put(array, offset, value) {\n        ieee754.write(array, value, offset, true, 63, this.len);\n        return offset + this.len;\n    }\n};\n/**\n * Ignore a given number of bytes\n */\nclass IgnoreType {\n    /**\n     * @param len number of bytes to ignore\n     */\n    constructor(len) {\n        this.len = len;\n    }\n    // ToDo: don't read, but skip data\n    get(array, off) {\n    }\n}\nexports.IgnoreType = IgnoreType;\nclass Uint8ArrayType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(array, offset) {\n        return array.subarray(offset, offset + this.len);\n    }\n}\nexports.Uint8ArrayType = Uint8ArrayType;\nclass BufferType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(uint8Array, off) {\n        return Buffer.from(uint8Array.subarray(off, off + this.len));\n    }\n}\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\nclass StringType {\n    constructor(len, encoding) {\n        this.len = len;\n        this.encoding = encoding;\n    }\n    get(uint8Array, offset) {\n        return Buffer.from(uint8Array).toString(this.encoding, offset, offset + this.len);\n    }\n}\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\nclass AnsiStringType {\n    constructor(len) {\n        this.len = len;\n    }\n    static decode(buffer, offset, until) {\n        let str = '';\n        for (let i = offset; i < until; ++i) {\n            str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n        }\n        return str;\n    }\n    static inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    static codePointToString(cp) {\n        if (cp <= 0xFFFF) {\n            return String.fromCharCode(cp);\n        }\n        else {\n            cp -= 0x10000;\n            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n        }\n    }\n    static singleByteDecoder(bite) {\n        if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n            return bite;\n        }\n        const codePoint = AnsiStringType.windows1252[bite - 0x80];\n        if (codePoint === null) {\n            throw Error('invaliding encoding');\n        }\n        return codePoint;\n    }\n    get(buffer, offset = 0) {\n        return AnsiStringType.decode(buffer, offset, offset + this.len);\n    }\n}\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}