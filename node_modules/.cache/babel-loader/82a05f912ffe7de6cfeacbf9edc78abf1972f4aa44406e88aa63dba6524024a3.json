{"ast":null,"code":"\"use strict\";\n\n/**\n * (C) Copyright IBM Corp. 2019, 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.McspTokenManager = exports.VpcInstanceTokenManager = exports.TokenManager = exports.JwtTokenManager = exports.IamRequestBasedTokenManager = exports.ContainerTokenManager = exports.Cp4dTokenManager = exports.IamTokenManager = void 0;\n/**\n * @module token-managers\n * The ibm-cloud-sdk-core module supports the following types of token authentication:\n *\n * Identity and Access Management (IAM)\n * Cloud Pak for Data\n * Container (IKS, etc)\n * VPC Instance\n * Multi-Cloud Saas Platform (MCSP)\n *\n * The token managers sit inside of an authenticator and do the work to retrieve\n * tokens, whereas the authenticators add these tokens to the actual request.\n *\n * classes:\n *   IamTokenManager: Token Manager of IAM via apikey.\n *   Cp4dTokenManager: Token Manager of CloudPak for data.\n *   ContainerTokenManager: Token manager of IAM via compute resource token.\n *   VpcInstanceTokenManager: Token manager of VPC Instance Metadata Service API tokens.\n *   McspTokenManager: Token Manager of MCSP via apikey.\n *   JwtTokenManager: A class for shared functionality for parsing, storing, and requesting JWT tokens.\n */\nvar iam_token_manager_1 = require(\"./iam-token-manager\");\nObject.defineProperty(exports, \"IamTokenManager\", {\n  enumerable: true,\n  get: function () {\n    return iam_token_manager_1.IamTokenManager;\n  }\n});\nvar cp4d_token_manager_1 = require(\"./cp4d-token-manager\");\nObject.defineProperty(exports, \"Cp4dTokenManager\", {\n  enumerable: true,\n  get: function () {\n    return cp4d_token_manager_1.Cp4dTokenManager;\n  }\n});\nvar container_token_manager_1 = require(\"./container-token-manager\");\nObject.defineProperty(exports, \"ContainerTokenManager\", {\n  enumerable: true,\n  get: function () {\n    return container_token_manager_1.ContainerTokenManager;\n  }\n});\nvar iam_request_based_token_manager_1 = require(\"./iam-request-based-token-manager\");\nObject.defineProperty(exports, \"IamRequestBasedTokenManager\", {\n  enumerable: true,\n  get: function () {\n    return iam_request_based_token_manager_1.IamRequestBasedTokenManager;\n  }\n});\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\nObject.defineProperty(exports, \"JwtTokenManager\", {\n  enumerable: true,\n  get: function () {\n    return jwt_token_manager_1.JwtTokenManager;\n  }\n});\nvar token_manager_1 = require(\"./token-manager\");\nObject.defineProperty(exports, \"TokenManager\", {\n  enumerable: true,\n  get: function () {\n    return token_manager_1.TokenManager;\n  }\n});\nvar vpc_instance_token_manager_1 = require(\"./vpc-instance-token-manager\");\nObject.defineProperty(exports, \"VpcInstanceTokenManager\", {\n  enumerable: true,\n  get: function () {\n    return vpc_instance_token_manager_1.VpcInstanceTokenManager;\n  }\n});\nvar mcsp_token_manager_1 = require(\"./mcsp-token-manager\");\nObject.defineProperty(exports, \"McspTokenManager\", {\n  enumerable: true,\n  get: function () {\n    return mcsp_token_manager_1.McspTokenManager;\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","McspTokenManager","VpcInstanceTokenManager","TokenManager","JwtTokenManager","IamRequestBasedTokenManager","ContainerTokenManager","Cp4dTokenManager","IamTokenManager","iam_token_manager_1","require","enumerable","get","cp4d_token_manager_1","container_token_manager_1","iam_request_based_token_manager_1","jwt_token_manager_1","token_manager_1","vpc_instance_token_manager_1","mcsp_token_manager_1"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/token-managers/index.js"],"sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2019, 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.McspTokenManager = exports.VpcInstanceTokenManager = exports.TokenManager = exports.JwtTokenManager = exports.IamRequestBasedTokenManager = exports.ContainerTokenManager = exports.Cp4dTokenManager = exports.IamTokenManager = void 0;\n/**\n * @module token-managers\n * The ibm-cloud-sdk-core module supports the following types of token authentication:\n *\n * Identity and Access Management (IAM)\n * Cloud Pak for Data\n * Container (IKS, etc)\n * VPC Instance\n * Multi-Cloud Saas Platform (MCSP)\n *\n * The token managers sit inside of an authenticator and do the work to retrieve\n * tokens, whereas the authenticators add these tokens to the actual request.\n *\n * classes:\n *   IamTokenManager: Token Manager of IAM via apikey.\n *   Cp4dTokenManager: Token Manager of CloudPak for data.\n *   ContainerTokenManager: Token manager of IAM via compute resource token.\n *   VpcInstanceTokenManager: Token manager of VPC Instance Metadata Service API tokens.\n *   McspTokenManager: Token Manager of MCSP via apikey.\n *   JwtTokenManager: A class for shared functionality for parsing, storing, and requesting JWT tokens.\n */\nvar iam_token_manager_1 = require(\"./iam-token-manager\");\nObject.defineProperty(exports, \"IamTokenManager\", { enumerable: true, get: function () { return iam_token_manager_1.IamTokenManager; } });\nvar cp4d_token_manager_1 = require(\"./cp4d-token-manager\");\nObject.defineProperty(exports, \"Cp4dTokenManager\", { enumerable: true, get: function () { return cp4d_token_manager_1.Cp4dTokenManager; } });\nvar container_token_manager_1 = require(\"./container-token-manager\");\nObject.defineProperty(exports, \"ContainerTokenManager\", { enumerable: true, get: function () { return container_token_manager_1.ContainerTokenManager; } });\nvar iam_request_based_token_manager_1 = require(\"./iam-request-based-token-manager\");\nObject.defineProperty(exports, \"IamRequestBasedTokenManager\", { enumerable: true, get: function () { return iam_request_based_token_manager_1.IamRequestBasedTokenManager; } });\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\nObject.defineProperty(exports, \"JwtTokenManager\", { enumerable: true, get: function () { return jwt_token_manager_1.JwtTokenManager; } });\nvar token_manager_1 = require(\"./token-manager\");\nObject.defineProperty(exports, \"TokenManager\", { enumerable: true, get: function () { return token_manager_1.TokenManager; } });\nvar vpc_instance_token_manager_1 = require(\"./vpc-instance-token-manager\");\nObject.defineProperty(exports, \"VpcInstanceTokenManager\", { enumerable: true, get: function () { return vpc_instance_token_manager_1.VpcInstanceTokenManager; } });\nvar mcsp_token_manager_1 = require(\"./mcsp-token-manager\");\nObject.defineProperty(exports, \"McspTokenManager\", { enumerable: true, get: function () { return mcsp_token_manager_1.McspTokenManager; } });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}