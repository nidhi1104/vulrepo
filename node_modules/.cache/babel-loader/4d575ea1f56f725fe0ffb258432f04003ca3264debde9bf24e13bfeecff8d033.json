{"ast":null,"code":"\"use strict\";\n\n/**\n * (C) Copyright IBM Corp. 2014, 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseService = void 0;\nvar auth_1 = require(\"../auth\");\nvar helper_1 = require(\"./helper\");\nvar logger_1 = __importDefault(require(\"./logger\"));\nvar request_wrapper_1 = require(\"./request-wrapper\");\n/**\n * Common functionality shared by generated service classes.\n *\n * The base service authenticates requests via its authenticator, and sends\n * them to the service endpoint.\n */\nvar BaseService = /** @class */function () {\n  /**\n   * Configuration values for a service.\n   *\n   * @param userOptions - the configuration options to set on the service instance.\n   * This should be an object with the following fields:\n   * - authenticator: (required) an Object used to authenticate requests to the service.\n   * - serviceUrl: (optional) the base url to use when contacting the service.\n   *   The base url may differ between IBM Cloud regions.\n   * - headers: (optional) a set of HTTP headers that should be included with every request sent to the service\n   * - disableSslVerification: (optional) a flag that indicates whether verification of the server's SSL certificate should be\n   *   disabled or not.\n   */\n  function BaseService(userOptions) {\n    if (!(this instanceof BaseService)) {\n      var err = 'the \"new\" keyword is required to create service instances';\n      logger_1.default.error(\"Error creating an instance of BaseService: \".concat(err));\n      throw new Error(err);\n    }\n    var baseServiceOptions = {};\n    var options = __assign({}, userOptions);\n    // for compatibility\n    if (options.url && !options.serviceUrl) {\n      options.serviceUrl = options.url;\n    }\n    if (options.serviceUrl) {\n      baseServiceOptions.serviceUrl = (0, helper_1.stripTrailingSlash)(options.serviceUrl);\n    }\n    // check serviceUrl for common user errors\n    var credentialProblems = (0, auth_1.checkCredentials)(options, ['serviceUrl']);\n    if (credentialProblems) {\n      logger_1.default.error(credentialProblems.message);\n      throw credentialProblems;\n    }\n    // if disableSslVerification is not explicity set to the boolean value `true`,\n    // force it to be false\n    if (options.disableSslVerification !== true) {\n      options.disableSslVerification = false;\n    }\n    var serviceClass = this.constructor;\n    this.baseOptions = __assign(__assign({\n      qs: {},\n      serviceUrl: serviceClass.DEFAULT_SERVICE_URL\n    }, options), baseServiceOptions);\n    this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions);\n    // enforce that an authenticator is set\n    if (!options.authenticator) {\n      throw new Error('Authenticator must be set.');\n    }\n    this.authenticator = options.authenticator;\n  }\n  /**\n   * Get the instance of the authenticator set on the service.\n   *\n   * @returns the Authenticator instance\n   */\n  BaseService.prototype.getAuthenticator = function () {\n    return this.authenticator;\n  };\n  /**\n   * Set the service URL to send requests to.\n   *\n   * @param url - the base URL for the service.\n   */\n  BaseService.prototype.setServiceUrl = function (url) {\n    if (url) {\n      this.baseOptions.serviceUrl = (0, helper_1.stripTrailingSlash)(url);\n    }\n  };\n  /**\n   * Set the HTTP headers to be sent in every request.\n   *\n   * @param headers - the map of headers to include in requests.\n   */\n  BaseService.prototype.setDefaultHeaders = function (headers) {\n    if (typeof headers !== 'object') {\n      // do nothing, for now\n      return;\n    }\n    this.baseOptions.headers = headers;\n  };\n  /**\n   * Turn request body compression on or off.\n   *\n   * @param setting - Will turn it on if 'true', off if 'false'.\n   */\n  BaseService.prototype.setEnableGzipCompression = function (setting) {\n    this.requestWrapperInstance.setCompressRequestData(setting);\n    // persist setting so that baseOptions accurately reflects the state of the flag\n    this.baseOptions.enableGzipCompression = setting;\n  };\n  /**\n   * Get the Axios instance set on the service.\n   * All requests will be made using this instance.\n   */\n  BaseService.prototype.getHttpClient = function () {\n    return this.requestWrapperInstance.getHttpClient();\n  };\n  /**\n   * Enable retries for unfulfilled requests.\n   *\n   * @param retryOptions - the configuration for retries\n   */\n  BaseService.prototype.enableRetries = function (retryOptions) {\n    this.requestWrapperInstance.enableRetries(retryOptions);\n  };\n  /**\n   * Disables retries.\n   */\n  BaseService.prototype.disableRetries = function () {\n    this.requestWrapperInstance.disableRetries();\n  };\n  /**\n   * Applies a given modifier function on a model object.\n   * Since the model object can be a map, or an array, or a model,\n   * these types needs different handling.\n   * Considering whether the input object is a map happens with an explicit parameter.\n   * @param input - the input model object\n   * @param converterFn - the function that is applied on the input object\n   * @param isMap - is `true` when the input object should be handled as a map\n   */\n  BaseService.convertModel = function (input, converterFn, isMap) {\n    if (input == null || typeof input === 'string') {\n      // no need for conversation\n      return input;\n    }\n    if (Array.isArray(input)) {\n      return BaseService.convertArray(input, converterFn, isMap);\n    } else if (isMap === true) {\n      return BaseService.convertMap(input, converterFn);\n    }\n    return converterFn(input);\n  };\n  /**\n   * Configure the service using external configuration\n   *\n   * @param serviceName - the name of the service. This will be used to read from external\n   * configuration.\n   */\n  BaseService.prototype.configureService = function (serviceName) {\n    if (!serviceName) {\n      var err = 'Error configuring service. Service name is required.';\n      logger_1.default.error(err);\n      throw new Error(err);\n    }\n    Object.assign(this.baseOptions, this.readOptionsFromExternalConfig(serviceName));\n    // overwrite the requestWrapperInstance with the new base options if applicable\n    this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions);\n  };\n  /**\n   * Wrapper around `sendRequest` that enforces the request will be authenticated.\n   *\n   * @param parameters - Service request options passed in by user.\n   * This should be an object with the following fields:\n   * - options.method: the http method\n   * - options.url: the path portion of the URL to be appended to the serviceUrl\n   * - options.path: the path parameters to be inserted into the URL\n   * - options.qs: the querystring to be included in the URL\n   * - options.body: the data to be sent as the request body\n   * - options.form: an object containing the key/value pairs for a www-form-urlencoded request.\n   * - options.formData: an object containing the contents for a multipart/form-data request\n   *   The following processing is performed on formData values:\n   *     - string: no special processing -- the value is sent as is\n   *     - object: the value is converted to a JSON string before insertion into the form body\n   *     - NodeJS.ReadableStream|Buffer|FileWithMetadata: sent as a file, with any associated metadata\n   *     - array: each element of the array is sent as a separate form part using any special processing as described above\n   * - defaultOptions.serviceUrl: the base URL of the service\n   * - defaultOptions.headers: additional HTTP headers to be sent with the request\n   * @returns a Promise\n   */\n  BaseService.prototype.createRequest = function (parameters) {\n    var _this = this;\n    // validate serviceUrl parameter has been set\n    var serviceUrl = parameters.defaultOptions && parameters.defaultOptions.serviceUrl;\n    if (!serviceUrl || typeof serviceUrl !== 'string') {\n      return Promise.reject(new Error('The service URL is required'));\n    }\n    return this.authenticator.authenticate(parameters.defaultOptions).then(function () {\n      // resolve() handles rejection as well, so resolving the result of sendRequest should allow for proper handling later\n      return _this.requestWrapperInstance.sendRequest(parameters);\n    });\n  };\n  /**\n   * Wrapper around `createRequest` that enforces arrived response to be deserialized.\n   * @param parameters - see `parameters` in `createRequest`\n   * @param deserializerFn - the deserializer function that is applied on the response object\n   * @param isMap - is `true` when the response object should be handled as a map\n   * @returns a Promise\n   */\n  BaseService.prototype.createRequestAndDeserializeResponse = function (parameters, deserializerFn, isMap) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.createRequest(parameters).then(function (r) {\n        if (r !== undefined && r.result !== undefined) {\n          r.result = BaseService.convertModel(r.result, deserializerFn, isMap);\n        }\n        resolve(r);\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n  // eslint-disable-next-line class-methods-use-this\n  BaseService.prototype.readOptionsFromExternalConfig = function (serviceName) {\n    var results = {};\n    var properties = (0, auth_1.readExternalSources)(serviceName);\n    if (properties !== null) {\n      // the user can define the following client-level variables in the credentials file:\n      // - url\n      // - disableSsl\n      // - enableGzip\n      var url = properties.url,\n        disableSsl = properties.disableSsl,\n        enableGzip = properties.enableGzip,\n        enableRetries = properties.enableRetries,\n        maxRetries = properties.maxRetries,\n        retryInterval = properties.retryInterval;\n      if (url) {\n        results.serviceUrl = (0, helper_1.stripTrailingSlash)(url);\n      }\n      if (disableSsl === true) {\n        results.disableSslVerification = disableSsl;\n      }\n      if (enableGzip === true) {\n        results.enableGzipCompression = enableGzip;\n      }\n      if (enableRetries !== undefined) {\n        results.enableRetries = enableRetries;\n      }\n      if (maxRetries !== undefined) {\n        results.maxRetries = maxRetries;\n      }\n      if (retryInterval !== undefined) {\n        results.retryInterval = retryInterval;\n      }\n    }\n    return results;\n  };\n  BaseService.convertArray = function (arrayInput, converterFn, isMap) {\n    var _this = this;\n    var serializedList = [];\n    arrayInput.forEach(function (element) {\n      serializedList.push(_this.convertModel(element, converterFn, isMap));\n    });\n    return serializedList;\n  };\n  BaseService.convertMap = function (mapInput, converterFn) {\n    var serializedMap = {};\n    Object.keys(mapInput).forEach(function (key) {\n      serializedMap[key] = BaseService.convertModel(mapInput[key], converterFn);\n    });\n    return serializedMap;\n  };\n  return BaseService;\n}();\nexports.BaseService = BaseService;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__importDefault","mod","__esModule","defineProperty","exports","value","BaseService","auth_1","require","helper_1","logger_1","request_wrapper_1","userOptions","err","default","error","concat","Error","baseServiceOptions","options","url","serviceUrl","stripTrailingSlash","credentialProblems","checkCredentials","message","disableSslVerification","serviceClass","constructor","baseOptions","qs","DEFAULT_SERVICE_URL","requestWrapperInstance","RequestWrapper","authenticator","getAuthenticator","setServiceUrl","setDefaultHeaders","headers","setEnableGzipCompression","setting","setCompressRequestData","enableGzipCompression","getHttpClient","enableRetries","retryOptions","disableRetries","convertModel","input","converterFn","isMap","Array","isArray","convertArray","convertMap","configureService","serviceName","readOptionsFromExternalConfig","createRequest","parameters","_this","defaultOptions","Promise","reject","authenticate","then","sendRequest","createRequestAndDeserializeResponse","deserializerFn","resolve","r","undefined","result","catch","results","properties","readExternalSources","disableSsl","enableGzip","maxRetries","retryInterval","arrayInput","serializedList","forEach","element","push","mapInput","serializedMap","keys","key"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/lib/base-service.js"],"sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2014, 2023.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseService = void 0;\nvar auth_1 = require(\"../auth\");\nvar helper_1 = require(\"./helper\");\nvar logger_1 = __importDefault(require(\"./logger\"));\nvar request_wrapper_1 = require(\"./request-wrapper\");\n/**\n * Common functionality shared by generated service classes.\n *\n * The base service authenticates requests via its authenticator, and sends\n * them to the service endpoint.\n */\nvar BaseService = /** @class */ (function () {\n    /**\n     * Configuration values for a service.\n     *\n     * @param userOptions - the configuration options to set on the service instance.\n     * This should be an object with the following fields:\n     * - authenticator: (required) an Object used to authenticate requests to the service.\n     * - serviceUrl: (optional) the base url to use when contacting the service.\n     *   The base url may differ between IBM Cloud regions.\n     * - headers: (optional) a set of HTTP headers that should be included with every request sent to the service\n     * - disableSslVerification: (optional) a flag that indicates whether verification of the server's SSL certificate should be\n     *   disabled or not.\n     */\n    function BaseService(userOptions) {\n        if (!(this instanceof BaseService)) {\n            var err = 'the \"new\" keyword is required to create service instances';\n            logger_1.default.error(\"Error creating an instance of BaseService: \".concat(err));\n            throw new Error(err);\n        }\n        var baseServiceOptions = {};\n        var options = __assign({}, userOptions);\n        // for compatibility\n        if (options.url && !options.serviceUrl) {\n            options.serviceUrl = options.url;\n        }\n        if (options.serviceUrl) {\n            baseServiceOptions.serviceUrl = (0, helper_1.stripTrailingSlash)(options.serviceUrl);\n        }\n        // check serviceUrl for common user errors\n        var credentialProblems = (0, auth_1.checkCredentials)(options, ['serviceUrl']);\n        if (credentialProblems) {\n            logger_1.default.error(credentialProblems.message);\n            throw credentialProblems;\n        }\n        // if disableSslVerification is not explicity set to the boolean value `true`,\n        // force it to be false\n        if (options.disableSslVerification !== true) {\n            options.disableSslVerification = false;\n        }\n        var serviceClass = this.constructor;\n        this.baseOptions = __assign(__assign({ qs: {}, serviceUrl: serviceClass.DEFAULT_SERVICE_URL }, options), baseServiceOptions);\n        this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions);\n        // enforce that an authenticator is set\n        if (!options.authenticator) {\n            throw new Error('Authenticator must be set.');\n        }\n        this.authenticator = options.authenticator;\n    }\n    /**\n     * Get the instance of the authenticator set on the service.\n     *\n     * @returns the Authenticator instance\n     */\n    BaseService.prototype.getAuthenticator = function () {\n        return this.authenticator;\n    };\n    /**\n     * Set the service URL to send requests to.\n     *\n     * @param url - the base URL for the service.\n     */\n    BaseService.prototype.setServiceUrl = function (url) {\n        if (url) {\n            this.baseOptions.serviceUrl = (0, helper_1.stripTrailingSlash)(url);\n        }\n    };\n    /**\n     * Set the HTTP headers to be sent in every request.\n     *\n     * @param headers - the map of headers to include in requests.\n     */\n    BaseService.prototype.setDefaultHeaders = function (headers) {\n        if (typeof headers !== 'object') {\n            // do nothing, for now\n            return;\n        }\n        this.baseOptions.headers = headers;\n    };\n    /**\n     * Turn request body compression on or off.\n     *\n     * @param setting - Will turn it on if 'true', off if 'false'.\n     */\n    BaseService.prototype.setEnableGzipCompression = function (setting) {\n        this.requestWrapperInstance.setCompressRequestData(setting);\n        // persist setting so that baseOptions accurately reflects the state of the flag\n        this.baseOptions.enableGzipCompression = setting;\n    };\n    /**\n     * Get the Axios instance set on the service.\n     * All requests will be made using this instance.\n     */\n    BaseService.prototype.getHttpClient = function () {\n        return this.requestWrapperInstance.getHttpClient();\n    };\n    /**\n     * Enable retries for unfulfilled requests.\n     *\n     * @param retryOptions - the configuration for retries\n     */\n    BaseService.prototype.enableRetries = function (retryOptions) {\n        this.requestWrapperInstance.enableRetries(retryOptions);\n    };\n    /**\n     * Disables retries.\n     */\n    BaseService.prototype.disableRetries = function () {\n        this.requestWrapperInstance.disableRetries();\n    };\n    /**\n     * Applies a given modifier function on a model object.\n     * Since the model object can be a map, or an array, or a model,\n     * these types needs different handling.\n     * Considering whether the input object is a map happens with an explicit parameter.\n     * @param input - the input model object\n     * @param converterFn - the function that is applied on the input object\n     * @param isMap - is `true` when the input object should be handled as a map\n     */\n    BaseService.convertModel = function (input, converterFn, isMap) {\n        if (input == null || typeof input === 'string') {\n            // no need for conversation\n            return input;\n        }\n        if (Array.isArray(input)) {\n            return BaseService.convertArray(input, converterFn, isMap);\n        }\n        else if (isMap === true) {\n            return BaseService.convertMap(input, converterFn);\n        }\n        return converterFn(input);\n    };\n    /**\n     * Configure the service using external configuration\n     *\n     * @param serviceName - the name of the service. This will be used to read from external\n     * configuration.\n     */\n    BaseService.prototype.configureService = function (serviceName) {\n        if (!serviceName) {\n            var err = 'Error configuring service. Service name is required.';\n            logger_1.default.error(err);\n            throw new Error(err);\n        }\n        Object.assign(this.baseOptions, this.readOptionsFromExternalConfig(serviceName));\n        // overwrite the requestWrapperInstance with the new base options if applicable\n        this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(this.baseOptions);\n    };\n    /**\n     * Wrapper around `sendRequest` that enforces the request will be authenticated.\n     *\n     * @param parameters - Service request options passed in by user.\n     * This should be an object with the following fields:\n     * - options.method: the http method\n     * - options.url: the path portion of the URL to be appended to the serviceUrl\n     * - options.path: the path parameters to be inserted into the URL\n     * - options.qs: the querystring to be included in the URL\n     * - options.body: the data to be sent as the request body\n     * - options.form: an object containing the key/value pairs for a www-form-urlencoded request.\n     * - options.formData: an object containing the contents for a multipart/form-data request\n     *   The following processing is performed on formData values:\n     *     - string: no special processing -- the value is sent as is\n     *     - object: the value is converted to a JSON string before insertion into the form body\n     *     - NodeJS.ReadableStream|Buffer|FileWithMetadata: sent as a file, with any associated metadata\n     *     - array: each element of the array is sent as a separate form part using any special processing as described above\n     * - defaultOptions.serviceUrl: the base URL of the service\n     * - defaultOptions.headers: additional HTTP headers to be sent with the request\n     * @returns a Promise\n     */\n    BaseService.prototype.createRequest = function (parameters) {\n        var _this = this;\n        // validate serviceUrl parameter has been set\n        var serviceUrl = parameters.defaultOptions && parameters.defaultOptions.serviceUrl;\n        if (!serviceUrl || typeof serviceUrl !== 'string') {\n            return Promise.reject(new Error('The service URL is required'));\n        }\n        return this.authenticator.authenticate(parameters.defaultOptions).then(function () {\n            // resolve() handles rejection as well, so resolving the result of sendRequest should allow for proper handling later\n            return _this.requestWrapperInstance.sendRequest(parameters);\n        });\n    };\n    /**\n     * Wrapper around `createRequest` that enforces arrived response to be deserialized.\n     * @param parameters - see `parameters` in `createRequest`\n     * @param deserializerFn - the deserializer function that is applied on the response object\n     * @param isMap - is `true` when the response object should be handled as a map\n     * @returns a Promise\n     */\n    BaseService.prototype.createRequestAndDeserializeResponse = function (parameters, deserializerFn, isMap) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.createRequest(parameters)\n                .then(function (r) {\n                if (r !== undefined && r.result !== undefined) {\n                    r.result = BaseService.convertModel(r.result, deserializerFn, isMap);\n                }\n                resolve(r);\n            })\n                .catch(function (err) { return reject(err); });\n        });\n    };\n    // eslint-disable-next-line class-methods-use-this\n    BaseService.prototype.readOptionsFromExternalConfig = function (serviceName) {\n        var results = {};\n        var properties = (0, auth_1.readExternalSources)(serviceName);\n        if (properties !== null) {\n            // the user can define the following client-level variables in the credentials file:\n            // - url\n            // - disableSsl\n            // - enableGzip\n            var url = properties.url, disableSsl = properties.disableSsl, enableGzip = properties.enableGzip, enableRetries = properties.enableRetries, maxRetries = properties.maxRetries, retryInterval = properties.retryInterval;\n            if (url) {\n                results.serviceUrl = (0, helper_1.stripTrailingSlash)(url);\n            }\n            if (disableSsl === true) {\n                results.disableSslVerification = disableSsl;\n            }\n            if (enableGzip === true) {\n                results.enableGzipCompression = enableGzip;\n            }\n            if (enableRetries !== undefined) {\n                results.enableRetries = enableRetries;\n            }\n            if (maxRetries !== undefined) {\n                results.maxRetries = maxRetries;\n            }\n            if (retryInterval !== undefined) {\n                results.retryInterval = retryInterval;\n            }\n        }\n        return results;\n    };\n    BaseService.convertArray = function (arrayInput, converterFn, isMap) {\n        var _this = this;\n        var serializedList = [];\n        arrayInput.forEach(function (element) {\n            serializedList.push(_this.convertModel(element, converterFn, isMap));\n        });\n        return serializedList;\n    };\n    BaseService.convertMap = function (mapInput, converterFn) {\n        var serializedMap = {};\n        Object.keys(mapInput).forEach(function (key) {\n            serializedMap[key] = BaseService.convertModel(mapInput[key], converterFn);\n        });\n        return serializedMap;\n    };\n    return BaseService;\n}());\nexports.BaseService = BaseService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}