{"ast":null,"code":"\"use strict\";\n\n/**\n * (C) Copyright IBM Corp. 2019, 202e.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IamRequestBasedAuthenticator = void 0;\nvar iam_request_based_token_manager_1 = require(\"../token-managers/iam-request-based-token-manager\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The IamRequestBasedAuthenticator provides shared configuration and functionality\n * for authenticators that interact with the IAM token service. This authenticator\n * is not meant for use on its own.\n */\nvar IamRequestBasedAuthenticator = /** @class */function (_super) {\n  __extends(IamRequestBasedAuthenticator, _super);\n  /**\n   *\n   * Create a new IamRequestBasedAuthenticator instance.\n   *\n   * @param options - Configuration options for IAM authentication.\n   * This should be an object containing these fields:\n   * - url: (optional) the endpoint URL for the token service\n   * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n   * should be disabled or not\n   * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n   * - clientId: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n   * Authorization header to be included in each request to the token service\n   * - clientSecret: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n   * Authorization header to be included in each request to the token service\n   * - scope: (optional) the \"scope\" parameter to use when fetching the bearer token from the token service\n   *\n   * @throws Error: the configuration options are not valid.\n   */\n  function IamRequestBasedAuthenticator(options) {\n    var _this = this;\n    // all parameters are optional\n    options = options || {};\n    _this = _super.call(this, options) || this;\n    _this.clientId = options.clientId;\n    _this.clientSecret = options.clientSecret;\n    _this.scope = options.scope;\n    _this.tokenManager = new iam_request_based_token_manager_1.IamRequestBasedTokenManager(options);\n    return _this;\n  }\n  /**\n   * Setter for the mutually inclusive \"clientId\" and the \"clientSecret\" fields.\n   * @param clientId - the \"clientId\" value used to form a Basic Authorization header for IAM token requests\n   * @param clientSecret - the \"clientSecret\" value used to form a Basic Authorization header for IAM token requests\n   */\n  IamRequestBasedAuthenticator.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    // update properties in token manager\n    this.tokenManager.setClientIdAndSecret(clientId, clientSecret);\n  };\n  /**\n   * Setter for the \"scope\" parameter to use when fetching the bearer token from the IAM token server.\n   * @param scope - (optional) a space-separated string that specifies one or more scopes to be\n   * associated with IAM token requests\n   */\n  IamRequestBasedAuthenticator.prototype.setScope = function (scope) {\n    this.scope = scope;\n    // update properties in token manager\n    this.tokenManager.setScope(scope);\n  };\n  /**\n   * Return the most recently stored refresh token.\n   *\n   * @returns the refresh token string\n   */\n  IamRequestBasedAuthenticator.prototype.getRefreshToken = function () {\n    return this.tokenManager.getRefreshToken();\n  };\n  return IamRequestBasedAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator);\nexports.IamRequestBasedAuthenticator = IamRequestBasedAuthenticator;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","IamRequestBasedAuthenticator","iam_request_based_token_manager_1","require","token_request_based_authenticator_1","_super","options","_this","clientId","clientSecret","scope","tokenManager","IamRequestBasedTokenManager","setClientIdAndSecret","setScope","getRefreshToken","TokenRequestBasedAuthenticator"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/authenticators/iam-request-based-authenticator.js"],"sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2019, 202e.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IamRequestBasedAuthenticator = void 0;\nvar iam_request_based_token_manager_1 = require(\"../token-managers/iam-request-based-token-manager\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The IamRequestBasedAuthenticator provides shared configuration and functionality\n * for authenticators that interact with the IAM token service. This authenticator\n * is not meant for use on its own.\n */\nvar IamRequestBasedAuthenticator = /** @class */ (function (_super) {\n    __extends(IamRequestBasedAuthenticator, _super);\n    /**\n     *\n     * Create a new IamRequestBasedAuthenticator instance.\n     *\n     * @param options - Configuration options for IAM authentication.\n     * This should be an object containing these fields:\n     * - url: (optional) the endpoint URL for the token service\n     * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n     * should be disabled or not\n     * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n     * - clientId: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n     * Authorization header to be included in each request to the token service\n     * - clientSecret: (optional) the \"clientId\" and \"clientSecret\" fields are used to form a Basic\n     * Authorization header to be included in each request to the token service\n     * - scope: (optional) the \"scope\" parameter to use when fetching the bearer token from the token service\n     *\n     * @throws Error: the configuration options are not valid.\n     */\n    function IamRequestBasedAuthenticator(options) {\n        var _this = this;\n        // all parameters are optional\n        options = options || {};\n        _this = _super.call(this, options) || this;\n        _this.clientId = options.clientId;\n        _this.clientSecret = options.clientSecret;\n        _this.scope = options.scope;\n        _this.tokenManager = new iam_request_based_token_manager_1.IamRequestBasedTokenManager(options);\n        return _this;\n    }\n    /**\n     * Setter for the mutually inclusive \"clientId\" and the \"clientSecret\" fields.\n     * @param clientId - the \"clientId\" value used to form a Basic Authorization header for IAM token requests\n     * @param clientSecret - the \"clientSecret\" value used to form a Basic Authorization header for IAM token requests\n     */\n    IamRequestBasedAuthenticator.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        // update properties in token manager\n        this.tokenManager.setClientIdAndSecret(clientId, clientSecret);\n    };\n    /**\n     * Setter for the \"scope\" parameter to use when fetching the bearer token from the IAM token server.\n     * @param scope - (optional) a space-separated string that specifies one or more scopes to be\n     * associated with IAM token requests\n     */\n    IamRequestBasedAuthenticator.prototype.setScope = function (scope) {\n        this.scope = scope;\n        // update properties in token manager\n        this.tokenManager.setScope(scope);\n    };\n    /**\n     * Return the most recently stored refresh token.\n     *\n     * @returns the refresh token string\n     */\n    IamRequestBasedAuthenticator.prototype.getRefreshToken = function () {\n        return this.tokenManager.getRefreshToken();\n    };\n    return IamRequestBasedAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator));\nexports.IamRequestBasedAuthenticator = IamRequestBasedAuthenticator;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIC,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IACrG,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnB,IAAI,OAAOA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,IAAI,EACrC,MAAM,IAAIS,SAAS,CAAC,sBAAsB,GAAGC,MAAM,CAACV,CAAC,CAAC,GAAG,+BAA+B,CAAC;IAC7FF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASW,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGb,CAAC;IAAE;IACtCA,CAAC,CAACO,SAAS,GAAGN,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACY,MAAM,CAACb,CAAC,CAAC,IAAIW,EAAE,CAACL,SAAS,GAAGN,CAAC,CAACM,SAAS,EAAE,IAAIK,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJV,MAAM,CAACa,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,4BAA4B,GAAG,KAAK,CAAC;AAC7C,IAAIC,iCAAiC,GAAGC,OAAO,CAAC,mDAAmD,CAAC;AACpG,IAAIC,mCAAmC,GAAGD,OAAO,CAAC,qCAAqC,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA,IAAIF,4BAA4B,GAAG,aAAe,UAAUI,MAAM,EAAE;EAChExB,SAAS,CAACoB,4BAA4B,EAAEI,MAAM,CAAC;EAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASJ,4BAA4BA,CAACK,OAAO,EAAE;IAC3C,IAAIC,KAAK,GAAG,IAAI;IAChB;IACAD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBC,KAAK,GAAGF,MAAM,CAACb,IAAI,CAAC,IAAI,EAAEc,OAAO,CAAC,IAAI,IAAI;IAC1CC,KAAK,CAACC,QAAQ,GAAGF,OAAO,CAACE,QAAQ;IACjCD,KAAK,CAACE,YAAY,GAAGH,OAAO,CAACG,YAAY;IACzCF,KAAK,CAACG,KAAK,GAAGJ,OAAO,CAACI,KAAK;IAC3BH,KAAK,CAACI,YAAY,GAAG,IAAIT,iCAAiC,CAACU,2BAA2B,CAACN,OAAO,CAAC;IAC/F,OAAOC,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIN,4BAA4B,CAACX,SAAS,CAACuB,oBAAoB,GAAG,UAAUL,QAAQ,EAAEC,YAAY,EAAE;IAC5F,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC;IACA,IAAI,CAACE,YAAY,CAACE,oBAAoB,CAACL,QAAQ,EAAEC,YAAY,CAAC;EAClE,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIR,4BAA4B,CAACX,SAAS,CAACwB,QAAQ,GAAG,UAAUJ,KAAK,EAAE;IAC/D,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,IAAI,CAACC,YAAY,CAACG,QAAQ,CAACJ,KAAK,CAAC;EACrC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIT,4BAA4B,CAACX,SAAS,CAACyB,eAAe,GAAG,YAAY;IACjE,OAAO,IAAI,CAACJ,YAAY,CAACI,eAAe,CAAC,CAAC;EAC9C,CAAC;EACD,OAAOd,4BAA4B;AACvC,CAAC,CAACG,mCAAmC,CAACY,8BAA8B,CAAE;AACtEjB,OAAO,CAACE,4BAA4B,GAAGA,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}