{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars, class-methods-use-this */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenManager = void 0;\nvar helper_1 = require(\"../../lib/helper\");\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\nvar request_wrapper_1 = require(\"../../lib/request-wrapper\");\nvar helpers_1 = require(\"../utils/helpers\");\n/**\n * A class for shared functionality for storing, and requesting tokens.\n * Intended to be used as a parent to be extended for token request management.\n * Child classes should implement \"requestToken()\" to retrieve the token\n * from intended sources and \"saveTokenInfo(tokenResponse)\" to parse and save\n * token information from the response.\n */\nvar TokenManager = /** @class */function () {\n  /**\n   * Create a new TokenManager instance.\n   *\n   * @param options - Configuration options.\n   * This should be an object containing these fields:\n   * - url: (optional) the endpoint URL for the token service\n   * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n   * should be disabled or not\n   * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n   */\n  function TokenManager(options) {\n    // all parameters are optional\n    options = options || {};\n    if (options.url) {\n      this.url = (0, helper_1.stripTrailingSlash)(options.url);\n    }\n    // request options\n    this.disableSslVerification = Boolean(options.disableSslVerification);\n    this.headers = options.headers || {};\n    // any config options for the internal request library, like `proxy`, will be passed here\n    this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(options);\n    // Array of requests pending completion of an active token request -- initially empty\n    this.pendingRequests = [];\n  }\n  /**\n   * Retrieves a new token using \"requestToken()\" if there is not a\n   * currently stored token from a previous call, or the previous token\n   * has expired.\n   */\n  TokenManager.prototype.getToken = function () {\n    var _this = this;\n    if (!this.accessToken || this.isTokenExpired()) {\n      // 1. request a new token\n      return this.pacedRequestToken().then(function () {\n        return _this.accessToken;\n      });\n    }\n    // If refresh needed, kick one off\n    if (this.tokenNeedsRefresh()) {\n      this.requestToken().then(function (tokenResponse) {\n        _this.saveTokenInfo(tokenResponse);\n      }, function (err) {\n        // If the refresh request failed: catch the error, log a message, and return the stored token.\n        // The attempt to get a new token will be retried upon the next request.\n        var message = 'Attempted token refresh failed. The refresh will be retried with the next request.';\n        if (err && err.message) {\n          message += \" \".concat(err.message);\n        }\n        logger_1.default.error(message);\n        logger_1.default.debug(err);\n      });\n    }\n    // 2. use valid, managed token\n    return Promise.resolve(this.accessToken);\n  };\n  /**\n   * Sets the \"disableSslVerification\" property.\n   *\n   * @param value - the new value for the disableSslVerification property\n   */\n  TokenManager.prototype.setDisableSslVerification = function (value) {\n    // if they try to pass in a non-boolean value,\n    // use the \"truthy-ness\" of the value\n    this.disableSslVerification = Boolean(value);\n  };\n  /**\n   * Sets the headers to be included with each outbound request to the token server.\n   *\n   * @param headers - the set of headers to send with each request to the token server\n   */\n  TokenManager.prototype.setHeaders = function (headers) {\n    if (typeof headers !== 'object') {\n      // do nothing, for now\n      return;\n    }\n    this.headers = headers;\n  };\n  /**\n   * Paces requests to requestToken().\n   *\n   * This method pseudo-serializes requests for an access_token\n   * when the current token is undefined or expired.\n   * The first caller to this method records its `requestTime` and\n   * then issues the token request. Subsequent callers will check the\n   * `requestTime` to see if a request is active (has been issued within\n   * the past 60 seconds), and if so will queue their promise for the\n   * active requestor to resolve when that request completes.\n   */\n  TokenManager.prototype.pacedRequestToken = function () {\n    var _this = this;\n    var currentTime = (0, helpers_1.getCurrentTime)();\n    if (this.requestTime > currentTime - 60) {\n      // token request is active -- queue the promise for this request\n      return new Promise(function (resolve, reject) {\n        _this.pendingRequests.push({\n          resolve: resolve,\n          reject: reject\n        });\n      });\n    }\n    this.requestTime = currentTime;\n    return this.requestToken().then(function (tokenResponse) {\n      _this.saveTokenInfo(tokenResponse);\n      _this.pendingRequests.forEach(function (_a) {\n        var resolve = _a.resolve;\n        resolve();\n      });\n      _this.pendingRequests = [];\n      _this.requestTime = 0;\n    }).catch(function (err) {\n      _this.pendingRequests.forEach(function (_a) {\n        var reject = _a.reject;\n        reject(err);\n      });\n      throw err;\n    });\n  };\n  /**\n   * Request a token using an API endpoint.\n   *\n   * @returns Promise\n   */\n  TokenManager.prototype.requestToken = function () {\n    var errMsg = '`requestToken` MUST be overridden by a subclass of TokenManagerV1.';\n    var err = new Error(errMsg);\n    logger_1.default.error(errMsg);\n    return Promise.reject(err);\n  };\n  /**\n   * Parse and save token information from the response.\n   * Save the requested token into field `accessToken`.\n   * Calculate expiration and refresh time from the received info\n   * and store them in fields `expireTime` and `refreshTime`.\n   *\n   * @param tokenResponse - the response object from a token service request\n   */\n  TokenManager.prototype.saveTokenInfo = function (tokenResponse) {\n    var errMsg = '`saveTokenInfo` MUST be overridden by a subclass of TokenManager.';\n    logger_1.default.error(errMsg);\n  };\n  /**\n   * Checks if currently-stored token is expired\n   */\n  TokenManager.prototype.isTokenExpired = function () {\n    var expireTime = this.expireTime;\n    if (!expireTime) {\n      return true;\n    }\n    var currentTime = (0, helpers_1.getCurrentTime)();\n    return expireTime <= currentTime;\n  };\n  /**\n   * Checks if currently-stored token should be refreshed\n   * i.e. past the window to request a new token\n   */\n  TokenManager.prototype.tokenNeedsRefresh = function () {\n    var refreshTime = this.refreshTime;\n    var currentTime = (0, helpers_1.getCurrentTime)();\n    if (refreshTime && refreshTime > currentTime) {\n      return false;\n    }\n    // Update refreshTime to 60 seconds from now to avoid redundant refreshes\n    this.refreshTime = currentTime + 60;\n    return true;\n  };\n  return TokenManager;\n}();\nexports.TokenManager = TokenManager;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","TokenManager","helper_1","require","logger_1","request_wrapper_1","helpers_1","options","url","stripTrailingSlash","disableSslVerification","Boolean","headers","requestWrapperInstance","RequestWrapper","pendingRequests","prototype","getToken","_this","accessToken","isTokenExpired","pacedRequestToken","then","tokenNeedsRefresh","requestToken","tokenResponse","saveTokenInfo","err","message","concat","default","error","debug","Promise","resolve","setDisableSslVerification","setHeaders","currentTime","getCurrentTime","requestTime","reject","push","forEach","_a","catch","errMsg","Error","expireTime","refreshTime"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/auth/token-managers/token-manager.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/no-unused-vars, class-methods-use-this */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenManager = void 0;\nvar helper_1 = require(\"../../lib/helper\");\nvar logger_1 = __importDefault(require(\"../../lib/logger\"));\nvar request_wrapper_1 = require(\"../../lib/request-wrapper\");\nvar helpers_1 = require(\"../utils/helpers\");\n/**\n * A class for shared functionality for storing, and requesting tokens.\n * Intended to be used as a parent to be extended for token request management.\n * Child classes should implement \"requestToken()\" to retrieve the token\n * from intended sources and \"saveTokenInfo(tokenResponse)\" to parse and save\n * token information from the response.\n */\nvar TokenManager = /** @class */ (function () {\n    /**\n     * Create a new TokenManager instance.\n     *\n     * @param options - Configuration options.\n     * This should be an object containing these fields:\n     * - url: (optional) the endpoint URL for the token service\n     * - disableSslVerification: (optional) a flag that indicates whether verification of the token server's SSL certificate\n     * should be disabled or not\n     * - headers: (optional) a set of HTTP headers to be sent with each request to the token service\n     */\n    function TokenManager(options) {\n        // all parameters are optional\n        options = options || {};\n        if (options.url) {\n            this.url = (0, helper_1.stripTrailingSlash)(options.url);\n        }\n        // request options\n        this.disableSslVerification = Boolean(options.disableSslVerification);\n        this.headers = options.headers || {};\n        // any config options for the internal request library, like `proxy`, will be passed here\n        this.requestWrapperInstance = new request_wrapper_1.RequestWrapper(options);\n        // Array of requests pending completion of an active token request -- initially empty\n        this.pendingRequests = [];\n    }\n    /**\n     * Retrieves a new token using \"requestToken()\" if there is not a\n     * currently stored token from a previous call, or the previous token\n     * has expired.\n     */\n    TokenManager.prototype.getToken = function () {\n        var _this = this;\n        if (!this.accessToken || this.isTokenExpired()) {\n            // 1. request a new token\n            return this.pacedRequestToken().then(function () { return _this.accessToken; });\n        }\n        // If refresh needed, kick one off\n        if (this.tokenNeedsRefresh()) {\n            this.requestToken().then(function (tokenResponse) {\n                _this.saveTokenInfo(tokenResponse);\n            }, function (err) {\n                // If the refresh request failed: catch the error, log a message, and return the stored token.\n                // The attempt to get a new token will be retried upon the next request.\n                var message = 'Attempted token refresh failed. The refresh will be retried with the next request.';\n                if (err && err.message) {\n                    message += \" \".concat(err.message);\n                }\n                logger_1.default.error(message);\n                logger_1.default.debug(err);\n            });\n        }\n        // 2. use valid, managed token\n        return Promise.resolve(this.accessToken);\n    };\n    /**\n     * Sets the \"disableSslVerification\" property.\n     *\n     * @param value - the new value for the disableSslVerification property\n     */\n    TokenManager.prototype.setDisableSslVerification = function (value) {\n        // if they try to pass in a non-boolean value,\n        // use the \"truthy-ness\" of the value\n        this.disableSslVerification = Boolean(value);\n    };\n    /**\n     * Sets the headers to be included with each outbound request to the token server.\n     *\n     * @param headers - the set of headers to send with each request to the token server\n     */\n    TokenManager.prototype.setHeaders = function (headers) {\n        if (typeof headers !== 'object') {\n            // do nothing, for now\n            return;\n        }\n        this.headers = headers;\n    };\n    /**\n     * Paces requests to requestToken().\n     *\n     * This method pseudo-serializes requests for an access_token\n     * when the current token is undefined or expired.\n     * The first caller to this method records its `requestTime` and\n     * then issues the token request. Subsequent callers will check the\n     * `requestTime` to see if a request is active (has been issued within\n     * the past 60 seconds), and if so will queue their promise for the\n     * active requestor to resolve when that request completes.\n     */\n    TokenManager.prototype.pacedRequestToken = function () {\n        var _this = this;\n        var currentTime = (0, helpers_1.getCurrentTime)();\n        if (this.requestTime > currentTime - 60) {\n            // token request is active -- queue the promise for this request\n            return new Promise(function (resolve, reject) {\n                _this.pendingRequests.push({ resolve: resolve, reject: reject });\n            });\n        }\n        this.requestTime = currentTime;\n        return this.requestToken()\n            .then(function (tokenResponse) {\n            _this.saveTokenInfo(tokenResponse);\n            _this.pendingRequests.forEach(function (_a) {\n                var resolve = _a.resolve;\n                resolve();\n            });\n            _this.pendingRequests = [];\n            _this.requestTime = 0;\n        })\n            .catch(function (err) {\n            _this.pendingRequests.forEach(function (_a) {\n                var reject = _a.reject;\n                reject(err);\n            });\n            throw err;\n        });\n    };\n    /**\n     * Request a token using an API endpoint.\n     *\n     * @returns Promise\n     */\n    TokenManager.prototype.requestToken = function () {\n        var errMsg = '`requestToken` MUST be overridden by a subclass of TokenManagerV1.';\n        var err = new Error(errMsg);\n        logger_1.default.error(errMsg);\n        return Promise.reject(err);\n    };\n    /**\n     * Parse and save token information from the response.\n     * Save the requested token into field `accessToken`.\n     * Calculate expiration and refresh time from the received info\n     * and store them in fields `expireTime` and `refreshTime`.\n     *\n     * @param tokenResponse - the response object from a token service request\n     */\n    TokenManager.prototype.saveTokenInfo = function (tokenResponse) {\n        var errMsg = '`saveTokenInfo` MUST be overridden by a subclass of TokenManager.';\n        logger_1.default.error(errMsg);\n    };\n    /**\n     * Checks if currently-stored token is expired\n     */\n    TokenManager.prototype.isTokenExpired = function () {\n        var expireTime = this.expireTime;\n        if (!expireTime) {\n            return true;\n        }\n        var currentTime = (0, helpers_1.getCurrentTime)();\n        return expireTime <= currentTime;\n    };\n    /**\n     * Checks if currently-stored token should be refreshed\n     * i.e. past the window to request a new token\n     */\n    TokenManager.prototype.tokenNeedsRefresh = function () {\n        var refreshTime = this.refreshTime;\n        var currentTime = (0, helpers_1.getCurrentTime)();\n        if (refreshTime && refreshTime > currentTime) {\n            return false;\n        }\n        // Update refreshTime to 60 seconds from now to avoid redundant refreshes\n        this.refreshTime = currentTime + 60;\n        return true;\n    };\n    return TokenManager;\n}());\nexports.TokenManager = TokenManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}