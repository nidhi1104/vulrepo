{"ast":null,"code":"/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs');\nconst path = require('path');\nfunction log(message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`);\n}\n\n// Parses src into an Object\nfunction parse(src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */{\n  const debug = Boolean(options && options.debug);\n  const obj = {};\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/);\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1];\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || '';\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0;\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n');\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim();\n      obj[key] = value;\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`);\n    }\n  });\n  return obj;\n}\n\n// Populates process.env from .env file\nfunction config(options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */{\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding /*: string */ = 'utf8';\n  let debug = false;\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path;\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n    if (options.debug != null) {\n      debug = true;\n    }\n  }\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key];\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`);\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\nmodule.exports.config = config;\nmodule.exports.load = config;\nmodule.exports.parse = parse;","map":{"version":3,"names":["fs","require","path","log","message","console","parse","src","options","debug","Boolean","obj","toString","split","forEach","line","idx","keyValueArr","match","key","value","len","length","charAt","replace","trim","config","dotenvPath","resolve","process","cwd","encoding","parsed","readFileSync","Object","keys","env","hasOwnProperty","e","error","module","exports","load"],"sources":["/Users/nidhi/Desktop/cve-analysis-app/node_modules/ibm-cloud-sdk-core/node_modules/dotenv/lib/main.js"],"sourcesContent":["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || ''\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n')\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\n\n      obj[key] = value\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.load = config\nmodule.exports.parse = parse\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}